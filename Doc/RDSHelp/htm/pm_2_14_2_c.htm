<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="ru" xml:lang="ru">
<head>
  <link rel="stylesheet" type="text/css" href="../css/main.css" />
  <link rel="stylesheet" type="text/css" href="../css/cpp.css" />
  <meta http-equiv="Content-Type" content="text/html;charset=windows-1251" />
  <script type="text/javascript" src="script.js"></script>
  <title>&sect;2.14.2. Сброс подсистемы в начальное состояние</title>
</head><body onload="DocLoad()">
<div class="pageheader"><span class="off"><b>Текущий раздел:</b></span>
<div class="int"><p><a href="../index.htm">Описания RDS</a></p>
<div class="level"><p><a href="pm_index.htm">Руководство программиста</a></p>
<div class="level"><p><a href="pm_index.htm#light_htm:pm_2">Глава 2. Создание моделей блоков</a></p>
<div class="level"><p><a href="pm_index.htm#light_htm:pm_2_14">&sect;2.14. Программное управление расчетом</a></p>
<div class="level"><p>&sect;2.14.2. Сброс подсистемы в начальное состояние</p>
</div>
</div>
</div>
</div>
</div></div>
<div class="topnav"><span class="off"><b>Навигация:</b></span>
<div class="left">
<span class="button"><a href="pm_2_14_1.htm" title="Предыдущий параграф" id="pgup">&lt;&lt;</a></span>
<span class="button"><a href="pm_2_14_3.htm" title="Следующий параграф" id="pgdn">&gt;&gt;</a></span>
<span class="divider"></span>
<span class="button"><a href="pm_index.htm#light_htm:pm_2_14_2">Оглавление</a></span>
<span class="button"><a href="alpha.htm">Указатель</a></span>
</div>
<div class="right">
<span class="tab"><a href="pm_2_14_2.htm">Текст</a></span>
<span class="curtab">С++</span>
</div>
</div>

<div class="text">

<p>Полный исходный текст на языке C++ для библиотеки (DLL) с моделями блоков, участвующих
в расчетах траектории полета снаряда и иллюстрирующих
программный сброс и перезапуск расчета. Библиотека содержит четыре модели:</p>

<ul>
  <li><span class="cpp">Ballistics</span> &ndash; блок расчета траектории полета снаряда;</li>
  <li><span class="cpp">ArtSearch</span> &ndash; блок поиска угла возвышения для заданной дальности
  полета;</li>
  <li><span class="cpp">ArtWalk</span> &ndash; блок перебора углов для построения графика
  зависимости дальности полета от угла возвышения;</li>
  <li><span class="cpp">StopCalc</span> &ndash; блок, останавливающий расчет
  по сигналу (копия модели из <a href="pm_2_14_1.htm" title="&sect;2.14.1. Запуск и остановка расчета">&sect;2.14.1</a>, сюда
  она включена для того, чтобы все модели из рассматриваемых примеров схем находились в одной библиотеке).</li>
</ul>

<pre class="cpp">  <span class="rem">// Программный сброс расчета на примере баллистических вычислений</span>
  <span class="preproc">#include &lt;windows.h&gt;</span>
  <span class="preproc">#include &lt;math.h&gt;</span>
  <span class="preproc">#include &lt;RdsDef.h&gt;</span>
  <span class="rem">// Подготовка описаний сервисных функций</span>
  <a class="hidden" href="pm_2_2.htm#ref11" title="Использование RdsFunc.h"><span class="preproc">#define RDS_SERV_FUNC_BODY GetInterfaceFunctions</span></a>
  <span class="preproc">#include &lt;RdsFunc.h&gt;</span>

  <span class="rem">// Глобальная переменная для значения ошибки</span>
  <span class="kw">double</span> <a class="hidden" href="pm_2_5_1.htm#ref12" title="Проверка вещественного числа на признак ошибки">DoubleErrorValue</a>;

  <span class="rem">//========== </span><a class="hidden" href="pm_2_2.htm" title="&sect;2.2. Главная функция DLL и файлы заголовков"><span class="rem">Главная функция DLL</span></a><span class="rem"> ==========</span>
  <span class="kw">int</span> WINAPI <a class="hidden" href="pm_2_2.htm#ref8" title="Главная функция DLL">DllEntryPoint</a>(<a class="hidden" href="app_ids.htm#light_ref17" title="Дескриптор модуля">HINSTANCE</a> <span class="rem">/*hinst*/</span>,
                           <span class="kw">unsigned</span> <span class="kw">long</span> reason,
                           <span class="kw">void</span>* <span class="rem">/*lpReserved*/</span>)
  { <span class="kw">if</span>(reason==DLL_PROCESS_ATTACH) <span class="rem">// Загрузка DLL</span>
      { <span class="rem">// Получение доступа к функциям RDS</span>
        <span class="kw">if</span>(!GetInterfaceFunctions())
          MessageBox(NULL,<span class="str">"Нет доступа к функциям"</span>,<span class="str">"Ошибка"</span>,MB_OK);
        <span class="kw">else</span>
          <a class="hidden" href="rdsGetHugeDouble.htm" title="А.5.2.22. rdsGetHugeDouble &ndash; получение значения-индикатора математической ошибки">rdsGetHugeDouble</a>(&amp;<a class="hidden" href="pm_2_5_1.htm#ref12" title="Проверка вещественного числа на признак ошибки">DoubleErrorValue</a>);

      }
    <span class="kw">return</span> <span class="const">1</span>;
  }
  <span class="rem">//========= Конец главной функции =========</span>

  <span class="rem">// Проверка наличия связи у входа блока</span>
  <a class="hidden" href="app_ids.htm#light_ref11" title="Логический тип Windows API">BOOL</a> CheckBlockInputConnection(
    <a class="hidden" href="app_ids.htm#light_ref1" title="Идентификатор блока">RDS_BHANDLE</a> Block,             <span class="rem">// Идентификатор блока</span>
    <span class="kw">int</span> num,                       <span class="rem">// Номер входа</span>
    <a class="hidden" href="RDS_VARDESCRIPTION.htm#ref2" title="Указатель на RDS_VARDESCRIPTION">RDS_PVARDESCRIPTION</a> pVarDescr) <span class="rem">// Указатель на структуру</span>
                                   <span class="rem">// описания переменной</span>
  { <a class="hidden" href="app_ids.htm#light_ref2" title="Идентификатор связи">RDS_CHANDLE</a> c; <span class="rem">// Идентификатор связи</span>
    <a class="hidden" href="RDS_POINTDESCRIPTION.htm#ref1" title="Структура RDS_POINTDESCRIPTION">RDS_POINTDESCRIPTION</a> PtDescr; <span class="rem">// Структура описания точки связи</span>

    <span class="rem">// Заполнение служебных полей структур их размерами</span>
    PtDescr.servSize=<span class="kw">sizeof</span>(PtDescr);
    pVarDescr-&gt;servSize=<span class="kw">sizeof</span>(<a class="hidden" href="RDS_VARDESCRIPTION.htm#ref1" title="Структура RDS_VARDESCRIPTION">RDS_VARDESCRIPTION</a>);

    <span class="rem">// Получение описания переменной блока по номеру</span>
    <span class="kw">if</span>(<a class="hidden" href="rdsGetBlockVar.htm" title="А.5.14.10. rdsGetBlockVar &ndash; переменная блока по номеру">rdsGetBlockVar</a>(Block,num,pVarDescr)==NULL)
      <span class="kw">return</span> FALSE; <span class="rem">// Нет такой переменной</span>

    <span class="rem">// Перебор всех связей, подключенных к этому блоку</span>
    c=NULL;
    <span class="kw">for</span>(;;)
      { <span class="rem">// Найти связь, следующую за c, и заполнить структуру</span>
        <span class="rem">// описания точки соединения PtDescr</span>
        c=<a class="hidden" href="rdsGetBlockLink.htm" title="А.5.6.20. rdsGetBlockLink &ndash; найти очередную связь, соединенную с блоком">rdsGetBlockLink</a>(Block,c,TRUE,FALSE,&amp;PtDescr);
        <span class="kw">if</span>(c==NULL) <span class="rem">// Больше нет связей</span>
          <span class="kw">break</span>;
        <span class="rem">// Найдена очередная связь – сравнение имени заданной</span>
        <span class="rem">// переменной с именем переменной точки этой связи</span>
        <span class="kw">if</span>(strcmp(PtDescr.VarName,pVarDescr-&gt;Name)==<span class="const">0</span>)
          <span class="kw">return</span> TRUE; <span class="rem">// Имена совпали – есть связь, соединенная</span>
                       <span class="rem">// с переменной блока</span>
      }
    <span class="rem">// Все подключенные связи перебраны, а связь, подключенная</span>
    <span class="rem">// к заданной переменной так и не была найдена</span>
    <span class="kw">return</span> FALSE;
  }
  <span class="rem">//===========================================</span>

  <span class="rem">// Добавление поля для ввода или индикации вещественного параметра</span>
  <a class="hidden" href="app_ids.htm#light_ref11" title="Логический тип Windows API">BOOL</a> <a class="hidden" href="pm_2_7_4.htm#light_ref10" title="Функция добавления поля в окно настройки">AddWinEditOrDisplayDouble</a>(
    <a class="hidden" href="app_ids.htm#light_ref6" title="Идентификатор вспомогательного объекта">RDS_HOBJECT</a> window, <span class="rem">// Идентификатор объекта-окна</span>
    <a class="hidden" href="app_ids.htm#light_ref1" title="Идентификатор блока">RDS_BHANDLE</a> Block,  <span class="rem">// Блок</span>
    <span class="kw">int</span> varnum,         <span class="rem">// Номер переменной в блоке</span>
    <span class="kw">int</span> ctrlnum,        <span class="rem">// Идентификатор поля ввода в окне</span>
    <span class="kw">char</span> *title)        <span class="rem">// Заголовок поля или NULL</span>
  { <span class="rem">// Структура описания переменной блока</span>
    <a class="hidden" href="RDS_VARDESCRIPTION.htm#ref1" title="Структура RDS_VARDESCRIPTION">RDS_VARDESCRIPTION</a> VarDescr;
    <span class="rem">// Проверка наличия связи у переменной varnum в блоке Block</span>
    <span class="rem">// и заполнение структуры VarDescr описанием переменной</span>
    <a class="hidden" href="app_ids.htm#light_ref11" title="Логический тип Windows API">BOOL</a> conn=CheckBlockInputConnection(Block,varnum,&amp;VarDescr);

    <span class="kw">if</span>(conn) <span class="rem">// К переменной подключена связь</span>
      { <span class="rem">// Вспомогательные переменные</span>
        <span class="kw">char</span> *caption; <span class="rem">// Заголовок поля</span>
        <span class="kw">double</span> *cur;   <span class="rem">// Указатель на данные переменной</span>
        <span class="rem">// Заголовок поля формируется из имени переменной и</span>
        <span class="rem">// текста "подключена связь"</span>
        caption=<a class="hidden" href="rdsDynStrCat.htm" title="А.5.4.6. rdsDynStrCat &ndash; сложение двух строк">rdsDynStrCat</a>(title?title:VarDescr.Name,
                             <span class="str">" (подключена связь)"</span>,
                             FALSE);
        <span class="rem">// Добавление поля для индикации текущего значения</span>
        <a class="hidden" href="rdsFORMAddEdit.htm" title="А.5.28.2. rdsFORMAddEdit &ndash; добавить поле ввода">rdsFORMAddEdit</a>(window,<span class="const">0</span>,ctrlnum,<a class="hidden" href="app_a_fields.htm#light_ref7" title="RDS_FORMCTRL_DISPLAY">RDS_FORMCTRL_DISPLAY</a>,
                       caption,<span class="const">80</span>);
        <span class="rem">// Освобождение динамически сформированной строки заголовка поля</span>
        <a class="hidden" href="rdsFree.htm" title="А.5.4.8. rdsFree &ndash; освобождение отведенной динамической памяти">rdsFree</a>(caption);
        <span class="rem">// Получение указателя на данные переменной</span>
        cur=(<span class="kw">double</span>*)<a class="hidden" href="rdsGetBlockVarBase.htm" title="А.5.14.11. rdsGetBlockVarBase &ndash; базовый адрес переменной блока по ее номеру">rdsGetBlockVarBase</a>(Block,varnum,NULL);
        <span class="rem">// Проверка – переменная должна существовать и иметь тип double</span>
        <span class="kw">if</span>(cur!=NULL &amp;&amp; VarDescr.Type==<span class="str">'D'</span>)
          <span class="rem">// Занесение текущего значения переменной в поле</span>
          <a class="hidden" href="rdsSetObjectDouble.htm" title="А.5.22.10. rdsSetObjectDouble &ndash; установить вещественное число">rdsSetObjectDouble</a>(window,ctrlnum,<a class="hidden" href="RDS_FORMVAL_VALUE.htm" title="А.5.28.27. Команда RDS_FORMVAL_VALUE &ndash; значение поля">RDS_FORMVAL_VALUE</a>,
                             *cur);
      }
    <span class="kw">else</span> <span class="rem">// К переменной не подключена связь</span>
      { <span class="rem">// Вспомогательная переменная для значения по умолчанию</span>
        <span class="kw">char</span> *defval;
        <span class="rem">// Получение строки со значением переменной по умолчанию</span>
        <span class="rem">// (необходимо потом освободить при помощи rdsFree)</span>
        defval=<a class="hidden" href="rdsGetBlockVarDefValueStr.htm" title="А.5.14.12. rdsGetBlockVarDefValueStr &ndash; получить значение переменной блока по умолчанию">rdsGetBlockVarDefValueStr</a>(Block,varnum,NULL);
        <span class="rem">// Добавление поля для ввода параметра</span>
        <a class="hidden" href="rdsFORMAddEdit.htm" title="А.5.28.2. rdsFORMAddEdit &ndash; добавить поле ввода">rdsFORMAddEdit</a>(window,<span class="const">0</span>,ctrlnum,<a class="hidden" href="app_a_fields.htm#light_ref8" title="RDS_FORMCTRL_EDIT">RDS_FORMCTRL_EDIT</a>,
                       title?title:VarDescr.Name,<span class="const">80</span>);
        <span class="rem">// Занесение в поле ввода значения перменной по умолчанию</span>
        <a class="hidden" href="rdsSetObjectStr.htm" title="А.5.22.12. rdsSetObjectStr &ndash; установить строку">rdsSetObjectStr</a>(window,ctrlnum,<a class="hidden" href="RDS_FORMVAL_VALUE.htm" title="А.5.28.27. Команда RDS_FORMVAL_VALUE &ndash; значение поля">RDS_FORMVAL_VALUE</a>,defval);
        <span class="rem">// Освобождение динамически сформированной строки</span>
        <a class="hidden" href="rdsFree.htm" title="А.5.4.8. rdsFree &ndash; освобождение отведенной динамической памяти">rdsFree</a>(defval);
      }
    <span class="rem">// Возврат: TRUE – есть связь, FALSE – нет связи</span>
    <span class="kw">return</span> conn;
  }
  <span class="rem">//===========================================</span>


  <span class="rem">// Функция настройки вещественных параметров, хранящихся в</span>
  <span class="rem">// статических переменных блока.</span>
  <span class="rem">// Возвращает: 1 – ОК, 0 – отмена.</span>
  <span class="kw">int</span> <a class="hidden" href="pm_2_14_2.htm#ref8" title="SetupDoubleVars">SetupDoubleVars</a>(
    <a class="hidden" href="app_ids.htm#light_ref1" title="Идентификатор блока">RDS_BHANDLE</a> Block, <span class="rem">// Настраиваемый блок</span>
    <span class="kw">char</span> *wintitle,    <span class="rem">// Заголовок окна настройки</span>
    <span class="kw">char</span> **vars)       <span class="rem">// Массив строк-описаний полей ввода</span>
  { <a class="hidden" href="app_ids.htm#light_ref6" title="Идентификатор вспомогательного объекта">RDS_HOBJECT</a> window; <span class="rem">// Идентификатор вспомогательного объекта</span>
    <a class="hidden" href="app_ids.htm#light_ref11" title="Логический тип Windows API">BOOL</a> ok;            <span class="rem">// Пользователь нажал "OK"</span>
    <span class="kw">int</span> count=<span class="const">0</span>;
    <a class="hidden" href="app_ids.htm#light_ref11" title="Логический тип Windows API">BOOL</a> *Connections;
    <span class="kw">int</span> *VarNums;

    <span class="kw">if</span>(vars==NULL) <span class="rem">// Ошибка – массив не передан</span>
      <span class="kw">return</span> <span class="const">0</span>;

    <span class="rem">// Подсчитываем число полей ввода в массиве vars</span>
    <span class="kw">while</span>(vars[count]!=NULL)
      count++;
    <span class="kw">if</span>(!count) <span class="rem">// Ошибка – массив пуст</span>
      <span class="kw">return</span> <span class="const">0</span>;

    <span class="rem">// Отводим вспомогательный массив логических значений, в котором</span>
    <span class="rem">// будем запоминать наличие связей, присоединенных к переменным,</span>
    <span class="rem">// а также массив целых чисел для номеров переменных, считанных</span>
    <span class="rem">// из строк массива vars</span>
    Connections=<span class="kw">new</span> <a class="hidden" href="app_ids.htm#light_ref11" title="Логический тип Windows API">BOOL</a>[count];
    VarNums=<span class="kw">new</span> <span class="kw">int</span>[count];

    <span class="rem">// Создаем окно с заголовком wintitle</span>
    window=<a class="hidden" href="rdsFORMCreate.htm" title="А.5.28.1. rdsFORMCreate &ndash; создать объект для работы с окном">rdsFORMCreate</a>(FALSE,-<span class="const">1</span>,-<span class="const">1</span>,wintitle);

    <span class="rem">// Добавляем поля ввода из массива vars, заполняя массивы</span>
    <span class="rem">// Connections и VarNums</span>
    <span class="kw">for</span>(<span class="kw">int</span> i=<span class="const">0</span>;i&lt;count;i++)
      { <span class="kw">char</span> *str;
        <span class="rem">// Считываем из строки номер переменной. Указатель на первый</span>
        <span class="rem">// после номера символ запишется в str.</span>
        VarNums[i]=strtol(vars[i],&amp;str,<span class="const">0</span>);
        <span class="rem">// Если после номера строка кончается, присваиваем str</span>
        <span class="rem">// значение NULL, чтобы в качестве заголовка было</span>
        <span class="rem">// использовано имя переменной</span>
        <span class="kw">if</span>(*str==<span class="const">0</span>)
          str=NULL;
        <span class="rem">// Добавляем поле ввода, запоминаем наличие связи</span>
        Connections[i]=<a class="hidden" href="pm_2_7_4.htm#light_ref10" title="Функция добавления поля в окно настройки">AddWinEditOrDisplayDouble</a>(window,Block,
                  VarNums[i],i,str);
      }

    <span class="rem">// Открываем окно</span>
    ok=<a class="hidden" href="rdsFORMShowModalEx.htm" title="А.5.28.6. rdsFORMShowModalEx &ndash; открыть окно с функцией обратного вызова">rdsFORMShowModalEx</a>(window,NULL);
    <span class="kw">if</span>(ok)
      { <span class="rem">// Нажата кнопка OK – запись параметров в переменные</span>
        <span class="kw">for</span>(<span class="kw">int</span> i=<span class="const">0</span>;i&lt;count;i++)
          <span class="kw">if</span>(!Connections[i]) <span class="rem">// У переменной нет связи</span>
            { <span class="kw">char</span> *str=<a class="hidden" href="rdsGetObjectStr.htm" title="А.5.22.9. rdsGetObjectStr &ndash; получить строку">rdsGetObjectStr</a>(window,i,<a class="hidden" href="RDS_FORMVAL_VALUE.htm" title="А.5.28.27. Команда RDS_FORMVAL_VALUE &ndash; значение поля">RDS_FORMVAL_VALUE</a>);
              <span class="rem">// Устанавливаем новое значение по умолчанию</span>
              <a class="hidden" href="rdsSetBlockVarDefValueStr.htm" title="А.5.14.17. rdsSetBlockVarDefValueStr &ndash; установить значение переменной по умолчанию">rdsSetBlockVarDefValueStr</a>(Block,VarNums[i],str);
            }
      }
    <span class="rem">// Удаляем вспомогательные массивы</span>
    <span class="kw">delete</span>[] Connections;
    <span class="kw">delete</span>[] VarNums;
    <span class="rem">// Уничтожаем окно</span>
    <a class="hidden" href="rdsDeleteObject.htm" title="А.5.22.4. rdsDeleteObject &ndash; удалить объект">rdsDeleteObject</a>(window);
    <span class="rem">// Возвращаем 1 или 0</span>
    <span class="kw">return</span> ok?<span class="const">1</span>:<span class="const">0</span>;
  }
  <span class="rem">//===========================================</span>

  <span class="rem">//===========================================</span>
  <span class="rem">// Модель блока расчета внешней баллистики</span>
  <span class="rem">//===========================================</span>
  <span class="kw">extern</span> <span class="str">"C"</span> <span class="kw">__declspec</span>(<span class="kw">dllexport</span>)
      <span class="kw">int</span> <a class="hidden" href="app_ids.htm#light_ref24" title="Тип вызова сервисных функций">RDSCALL</a> Ballistics(<span class="kw">int</span> CallMode,
                             <a class="hidden" href="RDS_BLOCKDATA.htm#ref2" title="Указатель на RDS_BLOCKDATA">RDS_PBLOCKDATA</a> BlockData,
                             <a class="hidden" href="app_ids.htm#light_ref21" title="Указатель на любые данные (void*)">LPVOID</a> ExtParam)
  { <a class="hidden" href="RDS_DYNVARLINK.htm#ref2" title="Указатель на RDS_DYNVARLINK">RDS_PDYNVARLINK</a> Link;
    <span class="kw">double</span> t,dt,A,n,F,Fx,Fy,xp,yp;
  <span class="rem">// </span><a class="hidden" href="pm_2_5_1.htm#light_ref9" title="Макросы для статических переменных блока"><span class="rem">Макроопределения для статических переменных</span></a>
  <span class="preproc">#define pStart   ((char *)(BlockData-&gt;VarData))</span>
  <span class="preproc">#define Start    (*((char *)(pStart)))      </span><span class="rem">// 0</span>
  <span class="preproc">#define Ready    (*((char *)(pStart+1)))    </span><span class="rem">// 1</span>
  <span class="preproc">#define D        (*((double *)(pStart+2)))  </span><span class="rem">// 2</span>
  <span class="preproc">#define m        (*((double *)(pStart+10))) </span><span class="rem">// 3</span>
  <span class="preproc">#define v0       (*((double *)(pStart+18))) </span><span class="rem">// 4</span>
  <span class="preproc">#define Angle    (*((double *)(pStart+26))) </span><span class="rem">// 5</span>
  <span class="preproc">#define l0       (*((double *)(pStart+34))) </span><span class="rem">// 6</span>
  <span class="preproc">#define h0       (*((double *)(pStart+42))) </span><span class="rem">// 7</span>
  <span class="preproc">#define ValSet   (*((char *)(pStart+50)))   </span><span class="rem">// 8</span>
  <span class="preproc">#define x        (*((double *)(pStart+51))) </span><span class="rem">// 9</span>
  <span class="preproc">#define y        (*((double *)(pStart+59))) </span><span class="rem">// 10</span>
  <span class="preproc">#define vx       (*((double *)(pStart+67))) </span><span class="rem">// 11</span>
  <span class="preproc">#define vy       (*((double *)(pStart+75))) </span><span class="rem">// 12</span>
  <span class="preproc">#define v        (*((double *)(pStart+83))) </span><span class="rem">// 13</span>
  <span class="preproc">#define Impact   (*((char *)(pStart+91)))   </span><span class="rem">// 14</span>
  <span class="preproc">#define t0       (*((double *)(pStart+92))) </span><span class="rem">// 15</span>
  <span class="preproc">#define InFlight (*((char *)(pStart+100)))  </span><span class="rem">// 16</span>
    <span class="rem">// Массив описания параметров для универсальной функции настройки</span>
    <span class="kw">static</span> <span class="kw">char</span> *setup[]={
      <span class="str">"6Длина ствола, м"</span>,
      <span class="str">"7Высота оси, м"</span>,
      <span class="str">"2Диаметр снаряда, м"</span>,
      <span class="str">"3Масса снаряда, кг"</span>,
      <span class="str">"4Начальная скорость, м/с"</span>,
      <span class="str">"5Угол вылета, град."</span>,
      NULL};

    <span class="kw">switch</span>(CallMode)
      { <span class="rem">// Инициализация</span>
        <span class="kw">case</span> <a class="hidden" href="RDS_BFM_INIT.htm" title="А.2.4.7. RDS_BFM_INIT &ndash; инициализация блока">RDS_BFM_INIT</a>:
          <span class="rem">// Подписка на динамическую переменную "DynTime"</span>
          Link=<a class="hidden" href="rdsSubscribeToDynamicVar.htm" title="А.5.16.7. rdsSubscribeToDynamicVar &ndash; создать подписку на динамическую переменную">rdsSubscribeToDynamicVar</a>(<a class="hidden" href="rdsCreateAndSubscribeDV.htm#light_ref4" title="RDS_DVPARENT">RDS_DVPARENT</a>,<span class="str">"DynTime"</span>,
                    <span class="str">"D"</span>,TRUE);
          BlockData-&gt;BlockData=Link;
          <span class="kw">break</span>;

        <span class="rem">// Очистка</span>
        <span class="kw">case</span> <a class="hidden" href="RDS_BFM_CLEANUP.htm" title="А.2.4.3. RDS_BFM_CLEANUP &ndash; очистка данных блока">RDS_BFM_CLEANUP</a>:
          <span class="rem">// Прекращение подписки на "DynTime"</span>
          <a class="hidden" href="rdsUnsubscribeFromDynamicVar.htm" title="А.5.16.8. rdsUnsubscribeFromDynamicVar &ndash; прекратить подписку на динамическую переменную">rdsUnsubscribeFromDynamicVar</a>(
              (<a class="hidden" href="RDS_DYNVARLINK.htm#ref2" title="Указатель на RDS_DYNVARLINK">RDS_PDYNVARLINK</a>)BlockData-&gt;BlockData);
          <span class="kw">break</span>;

        <span class="rem">// Проверка типов переменных</span>
        <span class="kw">case</span> <a class="hidden" href="RDS_BFM_VARCHECK.htm" title="А.2.4.18. RDS_BFM_VARCHECK &ndash; проверка допустимости структуры статических переменных блока">RDS_BFM_VARCHECK</a>:
          <span class="kw">return</span> strcmp((<span class="kw">char</span>*)ExtParam,<span class="str">"{SSDDDDDDLDDDDDSDL}"</span>)?
            <a class="hidden" href="RDS_BFM_VARCHECK.htm#light_ref3" title="Возврат RDS_BFR_BADVARSMSG">RDS_BFR_BADVARSMSG</a>:<a class="hidden" href="app_a_2_1.htm#ref2" title="Возврат RDS_BFR_DONE">RDS_BFR_DONE</a>;

        <span class="rem">// Вызов функции настройки</span>
        <span class="kw">case</span> <a class="hidden" href="RDS_BFM_SETUP.htm" title="А.2.6.13. RDS_BFM_SETUP &ndash; вызов функции настройки блока">RDS_BFM_SETUP</a>:
          <span class="kw">return</span> <a class="hidden" href="pm_2_14_2.htm#ref8" title="SetupDoubleVars">SetupDoubleVars</a>(BlockData-&gt;Block,
                     <span class="str">"Внешняя баллистика"</span>,setup);

        <span class="rem">// Изменение динамической переменной</span>
        <span class="kw">case</span> <a class="hidden" href="RDS_BFM_DYNVARCHANGE.htm" title="А.2.4.4. RDS_BFM_DYNVARCHANGE &ndash; изменение динамической переменной">RDS_BFM_DYNVARCHANGE</a>:
          <span class="rem">// Получаем доступ к динамической переменной времени</span>
          Link=(<a class="hidden" href="RDS_DYNVARLINK.htm#ref2" title="Указатель на RDS_DYNVARLINK">RDS_PDYNVARLINK</a>)BlockData-&gt;BlockData;
          <span class="kw">if</span>(Link==NULL || Link-&gt;Data==NULL) <span class="rem">// Нет доступа</span>
            <span class="kw">break</span>;
          t=*((<span class="kw">double</span>*)Link-&gt;Data); <span class="rem">// В t – текущее время</span>
          <span class="kw">if</span>(t==t0) <span class="rem">// Время не изменилось - ждем</span>
            <span class="kw">break</span>;
          dt=t-t0; <span class="rem">// В dt – интервал времени с прошлого шага</span>
          t0=t;    <span class="rem">// Запоминаем время в t0 чтобы при следующем</span>
                   <span class="rem">// изменени DynTime (t) можно было вычислить dt</span>
          <span class="kw">if</span>(!ValSet) <span class="rem">// Начальные значения еще не считаны</span>
            { <span class="rem">// Начинаем расчет траектории снаряда</span>
              <span class="kw">double</span> alpha=Angle*M_PI/<span class="const">180.0</span>; <span class="rem">// Угол в радианах</span>
              <span class="rem">// Занесение в переменные начальных значений</span>
              vx=v0*cos(alpha);
              vy=v0*sin(alpha);
              v=v0;
              x=l0*cos(alpha);
              y=h0+l0*sin(alpha);
              <span class="rem">// Сбрасываем сигнал падения</span>
              Impact=<span class="const">0</span>;
              <span class="rem">// Разрешаем расчет и взводим ValSet</span>
              InFlight=ValSet=<span class="const">1</span>;
            }
          <span class="kw">else</span> <span class="kw">if</span>(!InFlight) <span class="rem">// Снаряд не в полете – ничего не делаем</span>
            <span class="kw">break</span>;
          <span class="rem">// Вычисление модуля вектора скорости и силы сопротивления</span>
          <span class="rem">// по формуле Забудского</span>
          v=sqrt(vx*vx+vy*vy);
          <span class="kw">if</span>(v&lt;<span class="const">240.0</span>)
            { A=<span class="const">0</span>.<span class="const">0140</span>; n=<span class="const">2</span>; }
          <span class="kw">else</span> <span class="kw">if</span>(v&lt;<span class="const">295.0</span>)
            { A=<span class="const">0</span>.<span class="const">00005</span>83; n=<span class="const">3</span>; }
          <span class="kw">else</span> <span class="kw">if</span>(v&lt;<span class="const">375.0</span>)
            { A=<span class="const">0</span>.<span class="const">000000000670</span>; n=<span class="const">5</span>; }
          <span class="kw">else</span> <span class="kw">if</span>(v&lt;<span class="const">419.0</span>)
            { A=<span class="const">0</span>.<span class="const">0000</span>940; n=<span class="const">3</span>; }
          <span class="kw">else</span> <span class="kw">if</span>(v&lt;<span class="const">550.0</span>)
            { A=<span class="const">0</span>.<span class="const">03</span>94; n=<span class="const">2</span>; }
          <span class="kw">else</span> <span class="kw">if</span>(v&lt;<span class="const">800.0</span>)
            { A=<span class="const">0</span>.<span class="const">2616</span>; n=<span class="const">1.7</span>; }
          <span class="kw">else</span>
            { A=<span class="const">0</span>.<span class="const">713</span>; n=<span class="const">1.55</span>; }
          F=A*M_PI*D*D*pow(v,n)/<span class="const">4.0</span>; <span class="rem">// Сила сопротивления</span>
          <span class="rem">// Горизонтальная и вертикальная компоненты F</span>
          Fx=F*vx/v;
          Fy=F*vy/v;
          <span class="rem">// Запоминаем текущие значения координат</span>
          xp=x; yp=y;
          <span class="rem">// Вычисляем новые значения координат по</span>
          <span class="rem">// разностным уравнениям</span>
          x+=dt*vx;
          y+=dt*vy;
          <span class="rem">// Вычисляем новые значения компонент вектора скорости</span>
          <span class="rem">// по разностным уравнениям</span>
          vx-=dt*Fx/m;
          vy-=dt*(<span class="const">9.807</span>+Fy/m);
          <span class="kw">if</span>(y&lt;<span class="const">0</span>.<span class="const">0</span>) <span class="rem">// Снаряд встретился с поверхностью</span>
            { Impact=<span class="const">1</span>; <span class="rem">// Взводим выходной сигнал падения снаряда</span>
              InFlight=<span class="const">0</span>; <span class="rem">// Прекращаем расчет траектории</span>
              <span class="rem">// Вычисляем координату встречи с поверхностью</span>
              x=xp-yp*(x-xp)/(y-yp);
              y=vx=vy=<span class="const">0</span>;
            }
          Ready=<span class="const">1</span>; <span class="rem">// Для передачи выходов по связям</span>
          <span class="kw">break</span>;
      }
    <span class="kw">return</span> <a class="hidden" href="app_a_2_1.htm#ref2" title="Возврат RDS_BFR_DONE">RDS_BFR_DONE</a>;
  <span class="rem">// Отмера макроопределений переменных</span>
  <span class="preproc">#undef InFlight</span>
  <span class="preproc">#undef t0</span>
  <span class="preproc">#undef Impact</span>
  <span class="preproc">#undef v</span>
  <span class="preproc">#undef vy</span>
  <span class="preproc">#undef vx</span>
  <span class="preproc">#undef y</span>
  <span class="preproc">#undef x</span>
  <span class="preproc">#undef ValSet</span>
  <span class="preproc">#undef h0</span>
  <span class="preproc">#undef l0</span>
  <span class="preproc">#undef Angle</span>
  <span class="preproc">#undef v0</span>
  <span class="preproc">#undef m</span>
  <span class="preproc">#undef D</span>
  <span class="preproc">#undef Ready</span>
  <span class="preproc">#undef Start</span>
  <span class="preproc">#undef pStart</span>
  }
  <span class="rem">//===========================================</span>

  <span class="rem">//===========================================</span>
  <span class="rem">// Поиск угла возвышения для заданной дальности</span>
  <span class="rem">//===========================================</span>
  <span class="rem">// Личная область данных блока</span>
  <span class="kw">class</span> TArtSearchData
  { <span class="kw">public</span>:
      <a class="hidden" href="app_ids.htm#light_ref11" title="Логический тип Windows API">BOOL</a> SelfReset;  <span class="rem">// Блок сам сбросил подсистему</span>
      <span class="kw">int</span> Mode;        <span class="rem">// Текущее состояние алгоритма:</span>
        <span class="preproc">#define ASMODE_READY      0 </span><span class="rem">// Готов к поиску</span>
        <span class="preproc">#define ASMODE_SEARCHING  1 </span><span class="rem">// Идет поиск</span>
        <span class="preproc">#define ASMODE_FINALRUN   2 </span><span class="rem">// Последний прогон</span>
        <span class="preproc">#define ASMODE_FINISHED   3 </span><span class="rem">// Поиск завершен</span>
      <span class="kw">double</span> AngleStep; <span class="rem">// Текущий шаг изменения угла</span>
      <span class="kw">double</span> AngleToSet;<span class="rem">// Угол, который нужно установить</span>
                        <span class="rem">// после сброса</span>
      <span class="kw">double</span> OptAngle;  <span class="rem">// Наилучший на данный момент угол</span>
      <span class="kw">double</span> OptMiss;   <span class="rem">// Наименьший на данный момент промах</span>
      <a class="hidden" href="app_ids.htm#light_ref11" title="Логический тип Windows API">BOOL</a> FirstStep;   <span class="rem">// Проведенное моделирование – первое с</span>
                        <span class="rem">// новым шагом изменения угла</span>

      <span class="rem">// Ограничение диапазона и точности установки угла</span>
      <span class="kw">double</span> FixAngle(<span class="kw">double</span> a,<span class="kw">double</span> amin,<span class="kw">double</span> amax,<span class="kw">double</span> acc)
        { <span class="kw">if</span>(a&lt;amin) <span class="kw">return</span> amin;
          <span class="kw">if</span>(a&gt;amax) <span class="kw">return</span> amax;
          <span class="kw">return</span> floor((a-amin)/acc)*acc+amin;
        };

      <span class="rem">// Вывод сообщения о результатах поиска</span>
      <span class="kw">void</span> ShowResults(<span class="kw">void</span>)
        { <span class="kw">char</span> *str,
               *angle=<a class="hidden" href="rdsDtoA.htm" title="А.5.4.5. rdsDtoA &ndash; преобразование вещественного числа в строку">rdsDtoA</a>(OptAngle,-<span class="const">1</span>,NULL),
               *miss=<a class="hidden" href="rdsDtoA.htm" title="А.5.4.5. rdsDtoA &ndash; преобразование вещественного числа в строку">rdsDtoA</a>(OptMiss,<span class="const">0</span>,NULL);
          <span class="rem">// Формрование динамической строки с сообщением</span>
          str=<a class="hidden" href="rdsDynStrCat.htm" title="А.5.4.6. rdsDynStrCat &ndash; сложение двух строк">rdsDynStrCat</a>(<span class="str">"Угол возвышения: "</span>,angle,FALSE);
          <a class="hidden" href="rdsAddToDynStr.htm" title="А.5.4.1. rdsAddToDynStr &ndash; добавление строки к динамически отведенной строке">rdsAddToDynStr</a>(&amp;str,<span class="str">" гр.\nПромах: "</span>,FALSE);
          <a class="hidden" href="rdsAddToDynStr.htm" title="А.5.4.1. rdsAddToDynStr &ndash; добавление строки к динамически отведенной строке">rdsAddToDynStr</a>(&amp;str,miss,FALSE);
          <a class="hidden" href="rdsAddToDynStr.htm" title="А.5.4.1. rdsAddToDynStr &ndash; добавление строки к динамически отведенной строке">rdsAddToDynStr</a>(&amp;str,<span class="str">" м"</span>,FALSE);
          <span class="rem">// Вывод текста</span>
          <a class="hidden" href="rdsMessageBox.htm" title="А.5.5.6. rdsMessageBox &ndash; вывод окна сообщения">rdsMessageBox</a>(str,<span class="str">"Поиск завершен"</span>,<a class="hidden" href="rdsMessageBox.htm#light_ref7" title="MB_OK">MB_OK</a>);
          <span class="rem">// Освобождение всех динамических строк</span>
          <a class="hidden" href="rdsFree.htm" title="А.5.4.8. rdsFree &ndash; освобождение отведенной динамической памяти">rdsFree</a>(str);
          <a class="hidden" href="rdsFree.htm" title="А.5.4.8. rdsFree &ndash; освобождение отведенной динамической памяти">rdsFree</a>(angle);
          <a class="hidden" href="rdsFree.htm" title="А.5.4.8. rdsFree &ndash; освобождение отведенной динамической памяти">rdsFree</a>(miss);
        };

      <span class="rem">// Конструктор класса</span>
      TArtSearchData(<span class="kw">void</span>)
        { SelfReset=FALSE;
          Mode=ASMODE_READY;
        };
  };
  <span class="rem">//===========================================</span>

  <span class="rem">// Модель блока поиска угла для заданной дальности</span>
  <span class="kw">extern</span> <span class="str">"C"</span> <span class="kw">__declspec</span>(<span class="kw">dllexport</span>)
      <span class="kw">int</span> <a class="hidden" href="app_ids.htm#light_ref24" title="Тип вызова сервисных функций">RDSCALL</a> ArtSearch(<span class="kw">int</span> CallMode,
                            <a class="hidden" href="RDS_BLOCKDATA.htm#ref2" title="Указатель на RDS_BLOCKDATA">RDS_PBLOCKDATA</a> BlockData,
                            <a class="hidden" href="app_ids.htm#light_ref21" title="Указатель на любые данные (void*)">LPVOID</a> ExtParam)
  { TArtSearchData *data=(TArtSearchData*)(BlockData-&gt;BlockData);
    <span class="kw">double</span> delta;
  <span class="rem">// </span><a class="hidden" href="pm_2_5_1.htm#light_ref9" title="Макросы для статических переменных блока"><span class="rem">Макроопределения для статических переменных</span></a>
  <span class="preproc">#define pStart   ((char *)(BlockData-&gt;VarData))</span>
  <span class="preproc">#define Start    (*((char *)(pStart)))      </span><span class="rem">// 0</span>
  <span class="preproc">#define Ready    (*((char *)(pStart+1)))    </span><span class="rem">// 1</span>
  <span class="preproc">#define MinAngle (*((double *)(pStart+2)))  </span><span class="rem">// 2</span>
  <span class="preproc">#define MaxAngle (*((double *)(pStart+10))) </span><span class="rem">// 3</span>
  <span class="preproc">#define Accuracy (*((double *)(pStart+18))) </span><span class="rem">// 4</span>
  <span class="preproc">#define Distance (*((double *)(pStart+26))) </span><span class="rem">// 5</span>
  <span class="preproc">#define x        (*((double *)(pStart+34))) </span><span class="rem">// 6</span>
  <span class="preproc">#define Impact   (*((char *)(pStart+42)))   </span><span class="rem">// 7</span>
  <span class="preproc">#define Angle    (*((double *)(pStart+43))) </span><span class="rem">// 8</span>
    <span class="rem">// Массив описания параметров для универсальной функции настройки</span>
    <span class="kw">static</span> <span class="kw">char</span> *setup[]={
      <span class="str">"2Минимальный угол, град."</span>,
      <span class="str">"3Максимальный угол, град."</span>,
      <span class="str">"4Точность по углу, град."</span>,
      <span class="str">"5Дальность цели, м"</span>,
      NULL};

    <span class="kw">switch</span>(CallMode)
      { <span class="rem">// Инициализация</span>
        <span class="kw">case</span> <a class="hidden" href="RDS_BFM_INIT.htm" title="А.2.4.7. RDS_BFM_INIT &ndash; инициализация блока">RDS_BFM_INIT</a>:
          BlockData-&gt;BlockData=<span class="kw">new</span> TArtSearchData();
          <span class="kw">break</span>;

        <span class="rem">// Очистка</span>
        <span class="kw">case</span> <a class="hidden" href="RDS_BFM_CLEANUP.htm" title="А.2.4.3. RDS_BFM_CLEANUP &ndash; очистка данных блока">RDS_BFM_CLEANUP</a>:
          <span class="kw">delete</span> data;
          <span class="kw">break</span>;

        <span class="rem">// Проверка типов переменных</span>
        <span class="kw">case</span> <a class="hidden" href="RDS_BFM_VARCHECK.htm" title="А.2.4.18. RDS_BFM_VARCHECK &ndash; проверка допустимости структуры статических переменных блока">RDS_BFM_VARCHECK</a>:
          <span class="kw">return</span> strcmp((<span class="kw">char</span>*)ExtParam,<span class="str">"{SSDDDDDSD}"</span>)?
            <a class="hidden" href="RDS_BFM_VARCHECK.htm#light_ref3" title="Возврат RDS_BFR_BADVARSMSG">RDS_BFR_BADVARSMSG</a>:<a class="hidden" href="app_a_2_1.htm#ref2" title="Возврат RDS_BFR_DONE">RDS_BFR_DONE</a>;

        <span class="rem">// Вызов функции настройки</span>
        <span class="kw">case</span> <a class="hidden" href="RDS_BFM_SETUP.htm" title="А.2.6.13. RDS_BFM_SETUP &ndash; вызов функции настройки блока">RDS_BFM_SETUP</a>:
          <span class="kw">return</span> <a class="hidden" href="pm_2_14_2.htm#ref8" title="SetupDoubleVars">SetupDoubleVars</a>(BlockData-&gt;Block,
              <span class="str">"Поиск угла"</span>,setup);

        <span class="rem">// Запуск расчета</span>
        <span class="kw">case</span> <a class="hidden" href="RDS_BFM_STARTCALC.htm" title="А.2.4.14. RDS_BFM_STARTCALC &ndash; запуск расчета">RDS_BFM_STARTCALC</a>:
          <span class="kw">switch</span>(data-&gt;Mode)
            { <span class="kw">case</span> ASMODE_READY:
                <span class="rem">// Начать поиск угла</span>
                Angle=MaxAngle; <span class="rem">// Начальное значение</span>
                data-&gt;OptMiss=<a class="hidden" href="pm_2_5_1.htm#ref12" title="Проверка вещественного числа на признак ошибки">DoubleErrorValue</a>; <span class="rem">// Пока не определено</span>
                data-&gt;AngleStep=-(MaxAngle-MinAngle)/<span class="const">5</span>;
                data-&gt;FirstStep=TRUE;
                data-&gt;Mode=ASMODE_SEARCHING;
                Ready=<span class="const">1</span>; <span class="rem">// Для передачи угла по связи</span>
                <span class="kw">break</span>;
              <span class="kw">case</span> ASMODE_FINISHED:
                <span class="rem">// Поиск уже проведен – показать результаты</span>
                <a class="hidden" href="rdsStopCalc.htm" title="А.5.2.42. rdsStopCalc &ndash; остановка расчета">rdsStopCalc</a>();
                data-&gt;ShowResults();
                <span class="kw">break</span>;
            }
          <span class="kw">break</span>;

        <span class="rem">// Сброс расчета</span>
        <span class="kw">case</span> <a class="hidden" href="RDS_BFM_RESETCALC.htm" title="А.2.4.12. RDS_BFM_RESETCALC &ndash; сброс расчета">RDS_BFM_RESETCALC</a>:
          <span class="kw">if</span>(data-&gt;SelfReset)
            { <span class="rem">// Блок сам сбросил подсистему</span>
              data-&gt;SelfReset=FALSE; <span class="rem">// Очиска признака самосброса</span>
              <span class="rem">// Устанавливаем новый угол</span>
              Angle=data-&gt;AngleToSet;
              Ready=<span class="const">1</span>; <span class="rem">// Для передачи угла по связи</span>
            }
          <span class="kw">else</span> <span class="rem">// Расчет сброшен пользователем</span>
            data-&gt;Mode=ASMODE_READY;
          <span class="kw">break</span>;

        <span class="rem">// Один такт моделирования</span>
        <span class="kw">case</span> <a class="hidden" href="RDS_BFM_MODEL.htm" title="А.2.4.9. RDS_BFM_MODEL &ndash; выполнение такта расчета">RDS_BFM_MODEL</a>:
          <span class="kw">if</span>(!Impact) <span class="rem">// Снаряд еще не долетел</span>
            <span class="kw">break</span>;

          <span class="rem">// Снаряд долетел – дальность полета в x</span>
          Impact=<span class="const">0</span>; <span class="rem">// Сбрасываем входной сигнал</span>
          <span class="kw">if</span>(data-&gt;Mode==ASMODE_FINALRUN)
            { <span class="rem">// Это был последний (демонстрационный) прогон</span>
              data-&gt;Mode=ASMODE_FINISHED;
              <a class="hidden" href="rdsStopCalc.htm" title="А.5.2.42. rdsStopCalc &ndash; остановка расчета">rdsStopCalc</a>();
              data-&gt;ShowResults();
              <span class="kw">break</span>;
            }
          <span class="rem">// Это – очередной прогон в поиске угла</span>
          delta=fabs(x-Distance); <span class="rem">// Промах при угле Angle</span>
          <span class="kw">if</span>(data-&gt;OptMiss==<a class="hidden" href="pm_2_5_1.htm#ref12" title="Проверка вещественного числа на признак ошибки">DoubleErrorValue</a> || <span class="rem">// Первый прогон</span>
             delta&lt;data-&gt;OptMiss) <span class="rem">// При новом угле попали точнее</span>
            { <span class="rem">// Запоминаем новый наилучший угол и промах</span>
              data-&gt;OptAngle=Angle;
              data-&gt;OptMiss=delta;
              <span class="rem">// Двигаемся дальше с тем же шагом</span>
              data-&gt;AngleToSet=Angle+data-&gt;AngleStep;
              <span class="rem">// Новый расчет будет уже не первым с этим шагом</span>
              data-&gt;FirstStep=FALSE;
            }
          <span class="kw">else</span> <span class="rem">// Промах увеличился или не изменился</span>
            { <span class="kw">if</span>(data-&gt;FirstStep)
                { <span class="rem">// Мы только что провели первый расчет с новым</span>
                  <span class="rem">// значением шага. Промах увеличился – попробуем</span>
                  <span class="rem">// двигаться в обратном направлении с тем же</span>
                  <span class="rem">// шагом</span>
                  data-&gt;AngleStep=-data-&gt;AngleStep;
                  <span class="rem">// Новый расчет будет уже не первым с этим шагом</span>
                  data-&gt;FirstStep=FALSE;
                }
              <span class="kw">else</span>
                { <span class="rem">// Это был не первый расчет с данным значением</span>
                  <span class="rem">// шага. Мы либо сделали несколько шагов в этом</span>
                  <span class="rem">// направлении, либо уже пробовали двигаться</span>
                  <span class="rem">// в обратном. Теперь нужно уменьшить шаг вдвое,</span>
                  <span class="rem">//  если это возможно.</span>
                  <span class="kw">if</span>(fabs(data-&gt;AngleStep)&lt;=Accuracy)
                    { <span class="rem">// Достигли минимального шага по углу -</span>
                      <span class="rem">// выполняем последний расчет</span>
                      data-&gt;Mode=ASMODE_FINALRUN;
                      <span class="rem">// Устанавливаем найденный угол</span>
                      data-&gt;AngleToSet=data-&gt;OptAngle;
                      data-&gt;SelfReset=TRUE; <span class="rem">// Флаг самосброса</span>
                      <span class="rem">// Сбрасываем родительскую подсистему</span>
                      <a class="hidden" href="rdsResetSystemState.htm" title="А.5.7.3. rdsResetSystemState &ndash; сбросить состояние блока или подсистемы">rdsResetSystemState</a>(BlockData-&gt;Parent);
                      <span class="kw">break</span>;
                    }
                   <span class="rem">// Минимальный шаг еще не достигнут</span>
                   <span class="rem">// Дальше будем двигаться от наилучшего на данный</span>
                   <span class="rem">// момент угла с меньшим шагом</span>
                   data-&gt;AngleStep=data-&gt;AngleStep/<span class="const">2.0</span>;
                   <span class="rem">// Не даем шагу стать меньше минимального</span>
                   <span class="kw">if</span>(fabs(data-&gt;AngleStep)&lt;Accuracy)
                     data-&gt;AngleStep=(data-&gt;AngleStep&lt;<span class="const">0</span>)?
                         (-Accuracy):Accuracy;
                   <span class="rem">// Новый расчет будет первым с этим значением шага</span>
                   data-&gt;FirstStep=TRUE;
                }
              <span class="rem">// Новый угол, который установиться после сброса</span>
              data-&gt;AngleToSet=data-&gt;OptAngle+data-&gt;AngleStep;
            }
          <span class="rem">// Ограничиваем угол и привязываем его к точности</span>
          data-&gt;AngleToSet=data-&gt;FixAngle(
          data-&gt;AngleToSet,MinAngle,MaxAngle,Accuracy);
          <span class="rem">// Сбрасываекм родительскую подсистему</span>
          data-&gt;SelfReset=TRUE; <span class="rem">// Флаг самосброса</span>
          <a class="hidden" href="rdsResetSystemState.htm" title="А.5.7.3. rdsResetSystemState &ndash; сбросить состояние блока или подсистемы">rdsResetSystemState</a>(BlockData-&gt;Parent);
          <span class="kw">break</span>;
      }
    <span class="kw">return</span> <a class="hidden" href="app_a_2_1.htm#ref2" title="Возврат RDS_BFR_DONE">RDS_BFR_DONE</a>;
  <span class="rem">// Отмена макроопределений</span>
  <span class="preproc">#undef Angle</span>
  <span class="preproc">#undef Impact</span>
  <span class="preproc">#undef x</span>
  <span class="preproc">#undef Distance</span>
  <span class="preproc">#undef Accuracy</span>
  <span class="preproc">#undef MaxAngle</span>
  <span class="preproc">#undef MinAngle</span>
  <span class="preproc">#undef Ready</span>
  <span class="preproc">#undef Start</span>
  <span class="preproc">#undef pStart</span>
  }
  <span class="rem">//===========================================</span>

  <span class="rem">//===========================================</span>
  <span class="rem">// Блок перебора углов для построения графика</span>
  <span class="rem">// зависимости дальности от угла</span>
  <span class="rem">//===========================================</span>
  <span class="rem">// Личная область данных блока</span>
  <span class="kw">class</span> TArtWalkData
  { <span class="kw">public</span>:
      <a class="hidden" href="app_ids.htm#light_ref11" title="Логический тип Windows API">BOOL</a> SelfReset;   <span class="rem">// Блок сам сбросил подсистему</span>
      <span class="kw">double</span> AngleToSet;<span class="rem">// Угол, который нужно установить</span>
                        <span class="rem">// после сброса</span>
      <a class="hidden" href="app_ids.htm#light_ref11" title="Логический тип Windows API">BOOL</a> FirstStart;  <span class="rem">// Начать построение графика с начала</span>

      <span class="rem">// Конструктор класса</span>
      TArtWalkData(<span class="kw">void</span>)
        { SelfReset=FALSE; FirstStart=TRUE; };
  };
  <span class="rem">//===========================================</span>
  <span class="rem">// Функция модели блока</span>
  <span class="kw">extern</span> <span class="str">"C"</span> <span class="kw">__declspec</span>(<span class="kw">dllexport</span>)
      <span class="kw">int</span> <a class="hidden" href="app_ids.htm#light_ref24" title="Тип вызова сервисных функций">RDSCALL</a> ArtWalk(<span class="kw">int</span> CallMode,
                          <a class="hidden" href="RDS_BLOCKDATA.htm#ref2" title="Указатель на RDS_BLOCKDATA">RDS_PBLOCKDATA</a> BlockData,
                          <a class="hidden" href="app_ids.htm#light_ref21" title="Указатель на любые данные (void*)">LPVOID</a> ExtParam)
  { TArtWalkData *data=(TArtWalkData*)(BlockData-&gt;BlockData);
  <span class="rem">// </span><a class="hidden" href="pm_2_5_1.htm#light_ref9" title="Макросы для статических переменных блока"><span class="rem">Макроопределения для статических переменных</span></a>
  <span class="preproc">#define pStart ((char *)(BlockData-&gt;VarData))</span>
  <span class="preproc">#define Start (*((char *)(pStart)))                         </span><span class="rem">// 0</span>
  <span class="preproc">#define Ready (*((char *)(pStart+1)))                       </span><span class="rem">// 1</span>
  <span class="preproc">#define MinAngle (*((double *)(pStart+2)))                  </span><span class="rem">// 2</span>
  <span class="preproc">#define MaxAngle (*((double *)(pStart+10)))                 </span><span class="rem">// 3</span>
  <span class="preproc">#define Accuracy (*((double *)(pStart+18)))                 </span><span class="rem">// 4</span>
  <span class="preproc">#define Impact (*((char *)(pStart+26)))                     </span><span class="rem">// 5</span>
  <span class="preproc">#define GraphReady (*((char *)(pStart+27)))                 </span><span class="rem">// 6</span>
  <span class="preproc">#define Angle (*((double *)(pStart+28)))                    </span><span class="rem">// 7</span>
    <span class="rem">// Массив описания параметров для универсальной функции настройки</span>
    <span class="kw">static</span> <span class="kw">char</span> *setup[]={
      <span class="str">"2Минимальный угол, град."</span>,
      <span class="str">"3Маскимальный угол, град."</span>,
      <span class="str">"4Шаг по углу, град."</span>,
      NULL};

    <span class="kw">switch</span>(CallMode)
      { <span class="rem">// Инициализация</span>
        <span class="kw">case</span> <a class="hidden" href="RDS_BFM_INIT.htm" title="А.2.4.7. RDS_BFM_INIT &ndash; инициализация блока">RDS_BFM_INIT</a>:
          BlockData-&gt;BlockData=<span class="kw">new</span> TArtWalkData();
          <span class="kw">break</span>;
        <span class="rem">// Очистка</span>
        <span class="kw">case</span> <a class="hidden" href="RDS_BFM_CLEANUP.htm" title="А.2.4.3. RDS_BFM_CLEANUP &ndash; очистка данных блока">RDS_BFM_CLEANUP</a>:
          <span class="kw">delete</span> data;
          <span class="kw">break</span>;
        <span class="rem">// Проверка типов переменных</span>
        <span class="kw">case</span> <a class="hidden" href="RDS_BFM_VARCHECK.htm" title="А.2.4.18. RDS_BFM_VARCHECK &ndash; проверка допустимости структуры статических переменных блока">RDS_BFM_VARCHECK</a>:
          <span class="kw">return</span> strcmp((<span class="kw">char</span>*)ExtParam,<span class="str">"{SSDDDSSD}"</span>)?
            <a class="hidden" href="RDS_BFM_VARCHECK.htm#light_ref3" title="Возврат RDS_BFR_BADVARSMSG">RDS_BFR_BADVARSMSG</a>:<a class="hidden" href="app_a_2_1.htm#ref2" title="Возврат RDS_BFR_DONE">RDS_BFR_DONE</a>;
        <span class="rem">// Вызов функции настройки</span>
        <span class="kw">case</span> <a class="hidden" href="RDS_BFM_SETUP.htm" title="А.2.6.13. RDS_BFM_SETUP &ndash; вызов функции настройки блока">RDS_BFM_SETUP</a>:
          <span class="kw">return</span> <a class="hidden" href="pm_2_14_2.htm#ref8" title="SetupDoubleVars">SetupDoubleVars</a>(BlockData-&gt;Block,
              <span class="str">"Перебор углов"</span>,setup);

        <span class="rem">// Запуск расчета</span>
        <span class="kw">case</span> <a class="hidden" href="RDS_BFM_STARTCALC.htm" title="А.2.4.14. RDS_BFM_STARTCALC &ndash; запуск расчета">RDS_BFM_STARTCALC</a>:
          <span class="kw">if</span>(data-&gt;FirstStart)
            { <span class="rem">// Самый первый запуск – начало графика</span>
              Angle=MinAngle; <span class="rem">// Начинаем с начала диапазона</span>
              data-&gt;FirstStart=FALSE;
              Impact=GraphReady=<span class="const">0</span>;
              Ready=<span class="const">1</span>; <span class="rem">// Для передачи по связям</span>
            }
          <span class="kw">break</span>;

        <span class="rem">// Сброс расчета</span>
        <span class="kw">case</span> <a class="hidden" href="RDS_BFM_RESETCALC.htm" title="А.2.4.12. RDS_BFM_RESETCALC &ndash; сброс расчета">RDS_BFM_RESETCALC</a>:
          <span class="kw">if</span>(data-&gt;SelfReset)
            { <span class="rem">// Блок сам сбросил подсистему</span>
              data-&gt;SelfReset=FALSE;
              <span class="rem">// Устанавливаем новый угол</span>
              Angle=data-&gt;AngleToSet;
              Ready=<span class="const">1</span>; <span class="rem">// Для передачи по связям</span>
            }
          <span class="kw">else</span> <span class="rem">// Расчет сброшен кем=то еще</span>
            data-&gt;FirstStart=TRUE;
          <span class="kw">break</span>;

        <span class="rem">// Один такт расчета</span>
        <span class="kw">case</span> <a class="hidden" href="RDS_BFM_MODEL.htm" title="А.2.4.9. RDS_BFM_MODEL &ndash; выполнение такта расчета">RDS_BFM_MODEL</a>:
          <span class="kw">if</span>(!Impact) <span class="rem">// Снаряд не долетел</span>
            { <span class="rem">// Сбрасываем сигнал готовности графика</span>
              GraphReady=<span class="const">0</span>;
              <span class="kw">break</span>;
            }
          <span class="rem">// Снаряд долетел – проверяем готовность графика</span>
          <span class="kw">if</span>(!GraphReady)
            <span class="kw">break</span>;
          <span class="rem">// График готов</span>
          Impact=GraphReady=<span class="const">0</span>; <span class="rem">// Сбрасываем оба сигнала</span>
          <span class="kw">if</span>(Angle&gt;=MaxAngle)
            { <span class="rem">// Достигли конца диапазона – прекращаем расчет</span>
              <a class="hidden" href="rdsStopCalc.htm" title="А.5.2.42. rdsStopCalc &ndash; остановка расчета">rdsStopCalc</a>();
              <span class="kw">break</span>;
            }
          <span class="rem">// Увеличиваем угол на один шаг</span>
          data-&gt;AngleToSet=Angle+Accuracy;
          <span class="kw">if</span>(data-&gt;AngleToSet&gt;MaxAngle) <span class="rem">// Не допускаем выход</span>
            data-&gt;AngleToSet=MaxAngle;     <span class="rem">// за MaxAngle</span>
          data-&gt;SelfReset=TRUE; <span class="rem">// Сейчас блок сам сбросит подсистему</span>
          <a class="hidden" href="rdsResetSystemState.htm" title="А.5.7.3. rdsResetSystemState &ndash; сбросить состояние блока или подсистемы">rdsResetSystemState</a>(BlockData-&gt;Parent);
          <span class="kw">break</span>;
      }
    <span class="kw">return</span> <a class="hidden" href="app_a_2_1.htm#ref2" title="Возврат RDS_BFR_DONE">RDS_BFR_DONE</a>;
  <span class="rem">// Отмена макроопределений</span>
  <span class="preproc">#undef Angle</span>
  <span class="preproc">#undef GraphReady</span>
  <span class="preproc">#undef Impact</span>
  <span class="preproc">#undef Accuracy</span>
  <span class="preproc">#undef MaxAngle</span>
  <span class="preproc">#undef MinAngle</span>
  <span class="preproc">#undef Ready</span>
  <span class="preproc">#undef Start</span>
  <span class="preproc">#undef pStart</span>
  }
  <span class="rem">//===========================================</span>

  <span class="rem">//===========================================</span>
  <span class="rem">// Блок, запускающий и останавливающий расчет</span>
  <span class="rem">//===========================================</span>
  <span class="kw">extern</span> <span class="str">"C"</span> <span class="kw">__declspec</span>(<span class="kw">dllexport</span>)
    <span class="kw">int</span> <a class="hidden" href="app_ids.htm#light_ref24" title="Тип вызова сервисных функций">RDSCALL</a> StopCalc(<span class="kw">int</span> CallMode,
        <a class="hidden" href="RDS_BLOCKDATA.htm#ref2" title="Указатель на RDS_BLOCKDATA">RDS_PBLOCKDATA</a> BlockData,
        <a class="hidden" href="app_ids.htm#light_ref21" title="Указатель на любые данные (void*)">LPVOID</a> ExtParam)
  { <span class="kw">switch</span>(CallMode)
      { <span class="kw">case</span> <a class="hidden" href="RDS_BFM_MODEL.htm" title="А.2.4.9. RDS_BFM_MODEL &ndash; выполнение такта расчета">RDS_BFM_MODEL</a>:       <span class="rem">// Один такт расчета</span>
          <a class="hidden" href="rdsStopCalc.htm" title="А.5.2.42. rdsStopCalc &ndash; остановка расчета">rdsStopCalc</a>();
          <span class="kw">break</span>;
        <span class="kw">case</span> <a class="hidden" href="RDS_BFM_MOUSEDOWN.htm" title="А.2.6.9. RDS_BFM_MOUSEDOWN &ndash; нажатие кнопки мыши">RDS_BFM_MOUSEDOWN</a>: <span class="rem">// Нажатие кнопки мыши</span>
        <span class="kw">case</span> <a class="hidden" href="RDS_BFM_SETUP.htm" title="А.2.6.13. RDS_BFM_SETUP &ndash; вызов функции настройки блока">RDS_BFM_SETUP</a>: <span class="rem">// Вызов функции настройки</span>
          <span class="kw">if</span>(<a class="hidden" href="rdsCalcProcessIsRunning.htm" title="А.5.2.10. rdsCalcProcessIsRunning &ndash; RDS в режиме расчета">rdsCalcProcessIsRunning</a>()) <span class="rem">// Расчет сейчас запущен</span>
            <a class="hidden" href="rdsStopCalc.htm" title="А.5.2.42. rdsStopCalc &ndash; остановка расчета">rdsStopCalc</a>();
          <span class="kw">else</span> <span class="rem">// Расчет сейчас остановлен</span>
            <a class="hidden" href="rdsStartCalc.htm" title="А.5.2.41. rdsStartCalc &ndash; запуск расчета">rdsStartCalc</a>();
          <span class="kw">break</span>;
      }
    <span class="kw">return</span> <a class="hidden" href="app_a_2_1.htm#ref2" title="Возврат RDS_BFR_DONE">RDS_BFR_DONE</a>;
  }
  <span class="rem">//=========================================</span></pre>

</div>
<p style="clear:both; min-height:1em; padding:0px; margin: 0px;"></p><hr class="off" /><div class="bottomnav">
<div class="left">
<span class="button"><a href="pm_2_14_1.htm" title="Предыдущий параграф" id="pgup_f">&lt;&lt;</a></span>
<span class="button"><a href="pm_2_14_3.htm" title="Следующий параграф" id="pgdn_f">&gt;&gt;</a></span>
<span class="divider"></span>
<span class="button"><a href="pm_index.htm#light_htm:pm_2_14_2">Оглавление</a></span>
<span class="button"><a href="alpha.htm">Указатель</a></span>
</div>
</div>
</body>
</html>
