<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="ru" xml:lang="ru">
<head>
  <link rel="stylesheet" type="text/css" href="../css/main.css" />
  <link rel="stylesheet" type="text/css" href="../css/cpp.css" />
  <meta http-equiv="Content-Type" content="text/html;charset=windows-1251" />
  <script type="text/javascript" src="script.js"></script>
  <title>&sect;2.5.7. Использование входов со связанными сигналами</title>
</head><body onload="DocLoad()">
<div class="pageheader"><span class="off"><b>Текущий раздел:</b></span>
<div class="int"><p id="top"><a href="../index.htm">Описания RDS</a></p>
<div class="level"><p><a href="pm_index.htm">Руководство программиста</a></p>
<div class="level"><p><a href="pm_index.htm#light_htm:pm_2">Глава 2. Создание моделей блоков</a></p>
<div class="level"><p><a href="pm_index.htm#light_htm:pm_2_5">&sect;2.5. Статические переменные блоков</a></p>
<div class="level"><p>&sect;2.5.7. Использование входов со связанными сигналами</p>
</div>
</div>
</div>
</div>
</div></div>
<div class="topnav"><span class="off"><b>Навигация:</b></span>
<div class="left">
<span class="button"><a href="pm_2_5_6.htm" title="Предыдущий параграф" id="pgup">&lt;&lt;</a></span>
<span class="button"><a href="pm_2_5_8.htm" title="Следующий параграф" id="pgdn">&gt;&gt;</a></span>
<span class="divider"></span>
<span class="button"><a href="pm_index.htm#light_htm:pm_2_5_7">Оглавление</a></span>
<span class="button"><a href="alpha.htm">Указатель</a></span>
</div>
<div class="right">
<span class="curtab">Текст</span>
<span class="tab"><a href="pm_2_5_7_c.htm">С++</a></span>
</div>
</div>

<div class="text">
<h1 class="off">Руководство программиста</h1>
<h2 class="off">Глава 2. Создание моделей блоков</h2>
<h3 class="off">&sect;2.5. Статические переменные блоков</h3>
<h4>&sect;2.5.7. Использование входов со связанными сигналами</h4>
<p class="abstract">Описывается работа с входами блока, для которых заданы связанные сигналы &ndash; по этим сигналам
                можно понять, какие из входов блока сработали в данном такте расчета. Приводится пример модели блока,
                вычисляющей произведение минимального элемента первой входной матрицы и максимального элемента второй входной
                матрицы. Анализируя связанные сигналы входов, эта модель вычисляет максимальный или минимальный элемент только
                для изменившейся матрицы, экономя тем самым процессорное время.</p>


<p>В <a href="pm_1_3.htm#ref3" title="Режим расчета">режиме расчета</a>, когда модели блоков схемы постоянно вызываются в
цикле и с заданной периодичностью перерисовываются все открытые окна, нагрузка на систему увеличивается.
Если модель производит какие-либо сложные вычисления (например, итеративный расчет или обработку матриц),
задержка, вызванная этими вычислениями, повторяемыми в цикле, может снизить быстродействие системы. Поэтому
обычно стараются сделать так, чтобы модели блоков вызывались только тогда, когда это действительно необходимо.
Обычно для этого в параметрах блока
<a href="pm_1_4.htm#ref5" title="Запуск модели каждый такт">отключают флаг</a>
&laquo;<span class="menu">запуск каждый такт</span>&raquo; и устанавливают флаги &laquo;<span class="menu">пуск</span>&raquo; для всех входов блока,
в результате чего модель будет вызываться только при срабатывании связи, подключенной к любому из входов блока.
Если ни одна из связей не сработала, значит, значения входов блока не изменились, и, в большинстве случаев,
новые значения выходов вычислять не обязательно (если блок подписан на
<a href="pm_1_6.htm#ref1" title="Динамическая переменная">динамические переменные</a>, ему необходимо также отслеживать и их изменения,
но для этого существуют другие методы, которые описаны в
<a href="pm_index.htm#light_htm:pm_2_6" title="&sect;2.6. Динамические переменные">&sect;2.6</a>).</p>

<p>Иногда информации о том, что значение какого-то входа блока изменилось, бывает недостаточно.
Часто модели необходимо знать, какой именно вход получил новое значение &ndash; это позволит ей выполнить только
те вычисления, которые связаны с изменившимся входом. Для того, чтобы модель могла узнать об изменении конкретного
входа, необходимо добавить в блок дополнительную
переменную-<a href="pm_2_5_2.htm" title="&sect;2.5.2. Особенности использования сигналов">сигнал</a> (неважно, будет она входом, выходом или внутренней)
и связать с ней нужный вход блока, задав для этого входа тип
&laquo;вход/сигнал&raquo; вместо &laquo;вход&raquo; и указав имя сигнальной переменной
(см. <a href="pm_1_5.htm#pic2" title="Редактор переменных">рис.&nbsp;9</a>). При срабатывании связи, подключенной к данному
входу, связанной сигнальной переменной автоматически будет присвоено значение 1. Появление единицы в одной
или нескольких связанных переменных укажет модели блока на входы, значения которых изменились в предыдущем
такте расчета. Выполнив необходимые вычисления, модель должна присвоить всем связанным переменным значение 0,
подготовив их тем самым к следующему срабатыванию. Связанные переменные, как и обычные сигналы, не могут
получить нулевое значение по подключенной связи &ndash; при срабатывании связи сигнальная переменная принимает
значение 1 и сохраняет его до тех пор, пока модель блока самостоятельно не обнулит переменную. Допускается
связывание нескольких входов с одним сигналом, если модель блока должна выполнять одинаковые действия при
изменении любого из этих входов.</p>

<p>Рассмотрим в качестве примера блок, вычисляющий произведение минимального элемента входной матрицы вещественных
чисел &laquo;<span class="rdsvar">M1</span>&raquo; и максимального элемента такой же входной матрицы &laquo;<span class="rdsvar">M2</span>&raquo;. Для того,
чтобы определить максимальное и минимальное значения, необходимо перебрать все элементы матриц. Для матриц больших
размеров этот перебор может занять значительное время, поэтому модель блока будет запоминать значения максимального
и минимального элементов матриц &laquo;<span class="rdsvar">M1</span>&raquo; и &laquo;<span class="rdsvar">M2</span>&raquo; во вспомогательных переменных
&laquo;<span class="rdsvar">M1min</span>&raquo; и &laquo;<span class="rdsvar">M2max</span>&raquo; соответственно. Значение &laquo;<span class="rdsvar">M1min</span>&raquo; будет вычисляться
только при изменении входа &laquo;<span class="rdsvar">M1</span>&raquo;, значение &laquo;<span class="rdsvar">M2max</span>&raquo; &ndash; только при изменении
&laquo;<span class="rdsvar">M2</span>&raquo;. Для того, чтобы модель могла узнать о поступлении новых значений на входы, вход
&laquo;<span class="rdsvar">M1</span>&raquo; будет связан с внутренней сигнальной переменной &laquo;<span class="rdsvar">s1</span>&raquo;, вход
&laquo;<span class="rdsvar">M2</span>&raquo; &ndash; с переменной &laquo;<span class="rdsvar">s2</span>&raquo;. Таким образом, блок будет иметь следующую
структуру переменных:</p>

<div class="tablecenter"><div class="tcont">
<table>

  <tr>
    <th>Смещение</th>
    <th>Имя</th>
    <th>Тип</th>
    <th>Размер</th>
    <th>Вход/выход</th>
    <th>Пуск</th>
    <th>Начальное значение</th>
  </tr><tr><td class="center">0</td>
<td class="vcenter">Start</td>
<td class="center">Сигнал</td>
<td class="center">1</td>
<td class="center">Вход</td>
<td class="center">&checkmark;</td>
<td class="center">1</td>
</tr>
<tr><td class="center">1</td>
<td class="vcenter">Ready</td>
<td class="center">Сигнал</td>
<td class="center">1</td>
<td class="center">Выход</td>
<td></td>
<td class="center">0</td>
</tr>
<tr><td class="center">2</td>
<td class="vcenter">s1</td>
<td class="center">Сигнал</td>
<td class="center">1</td>
<td class="center">Внутренняя</td>
<td></td>
<td class="center">1</td>
</tr>
<tr><td class="center">3</td>
<td class="vcenter">s2</td>
<td class="center">Сигнал</td>
<td class="center">1</td>
<td class="center">Внутренняя</td>
<td></td>
<td class="center">1</td>
</tr>
<tr><td class="center">4</td>
<td class="vcenter">M1</td>
<td class="center">Матрица double</td>
<td class="center">8</td>
<td class="center">Вход/сигнал<br />s1</td>
<td class="center">&checkmark;</td>
<td class="center"></td>
</tr>
<tr><td class="center">12</td>
<td class="vcenter">M2</td>
<td class="center">Матрица double</td>
<td class="center">8</td>
<td class="center">Вход/сигнал<br />s2</td>
<td class="center">&checkmark;</td>
<td class="center"></td>
</tr>
<tr><td class="center">20</td>
<td class="vcenter">M1min</td>
<td class="center">double</td>
<td class="center">8</td>
<td class="center">Внутренняя</td>
<td></td>
<td class="center">?</td>
</tr>
<tr><td class="center">28</td>
<td class="vcenter">M2max</td>
<td class="center">double</td>
<td class="center">8</td>
<td class="center">Внутренняя</td>
<td></td>
<td class="center">?</td>
</tr>
<tr><td class="center">36</td>
<td class="vcenter">y</td>
<td class="center">double</td>
<td class="center">8</td>
<td class="center">Выход</td>
<td></td>
<td class="center">?</td>
</tr>


</table>
</div></div>

<p>Следует обратить внимание на то, что в качестве начальных значений переменных &laquo;<span class="rdsvar">M1min</span>&raquo; и
&laquo;<span class="rdsvar">M2max</span>&raquo; указан вопросительный знак. Вопросительным знаком в RDS обозначается
<a href="rdsGetHugeDouble.htm" title="А.5.2.22. rdsGetHugeDouble &ndash; получение значения-индикатора математической ошибки">специальное значение</a>, используемое в качестве индикатора
ошибки вычисления. Действительно, пока максимальный элемент &laquo;<span class="rdsvar">M2</span>&raquo; и минимальный элемент
&laquo;<span class="rdsvar">M1</span>&raquo; не вычислены, мы ничего не можем присвоить переменным
&laquo;<span class="rdsvar">M1min</span>&raquo; и &laquo;<span class="rdsvar">M2max</span>&raquo;.</p>

<p>Поскольку необходимость запуска модели будет определяться срабатыванием входных связей, необходимо включить флаг
&laquo;<span class="menu">запуск по сигналу</span>&raquo; (вместо &laquo;<span class="menu">запуск каждый такт</span>&raquo;) на
<a href="um_2_9_1.htm#pic4" title="Вкладка общие окна параметров простого блока">вкладке &laquo;<span class="menu">общие</span>&raquo;</a>
окна параметров этого блока и
установить <a href="pm_1_5.htm#ref18" title="Флаг запуска у входа блока">флаг &laquo;<span class="menu">пуск</span>&raquo;</a>
для входов &laquo;<span class="rdsvar">M1</span>&raquo; и &laquo;<span class="rdsvar">M2</span>&raquo; в окне редактирования переменных. Также необходимо
задать переменным &laquo;<span class="rdsvar">Start</span>&raquo;, &laquo;<span class="rdsvar">s1</span>&raquo; и &laquo;<span class="rdsvar">s2</span>&raquo; начальное значение 1.
При первом запуске расчета, до того, как сработает какая-либо из входных связей, модель должна вычислить значения
&laquo;<span class="rdsvar">M1min</span>&raquo; и &laquo;<span class="rdsvar">M2max</span>&raquo; по начальным значениям
&laquo;<span class="rdsvar">M1</span>&raquo; и &laquo;<span class="rdsvar">M2</span>&raquo;. Единичное начальное значение переменной &laquo;<span class="rdsvar">Start</span>&raquo; заставит
модель запуститься в самом первом такте расчета, единичные начальные значения &laquo;<span class="rdsvar">s1</span>&raquo; и &laquo;<span class="rdsvar">s2</span>&raquo;
заставят ее обработать обе входных матрицы. Начальные значения всех остальных переменных могут быть любыми.</p>

<p>Модель блока будет выглядеть следующим образом:</p>

<pre class="cpp">  <span class="kw">extern</span> <span class="str">"C"</span> <span class="kw">__declspec</span>(<span class="kw">dllexport</span>)
    <span class="kw">int</span> <a class="hidden" href="app_ids.htm#light_ref24" title="Тип вызова сервисных функций">RDSCALL</a> TestMatMinMax(<span class="kw">int</span> CallMode,
                               <a class="hidden" href="RDS_BLOCKDATA.htm#ref2" title="Указатель на RDS_BLOCKDATA">RDS_PBLOCKDATA</a> BlockData,
                               <a class="hidden" href="app_ids.htm#light_ref21" title="Указатель на любые данные (void*)">LPVOID</a> ExtParam)
  {
  <span class="rem">// </span><a class="hidden" href="pm_2_5_1.htm#light_ref9" title="Макросы для статических переменных блока"><span class="rem">Макроопределения для статических переменных</span></a>
  <span class="preproc">#define pStart ((char *)(BlockData-&gt;VarData))</span>
  <span class="preproc">#define Start  (*((char *)(pStart)))</span>
  <span class="preproc">#define Ready  (*((char *)(pStart+1)))</span>
  <span class="preproc">#define s1     (*((char *)(pStart+2)))</span>
  <span class="preproc">#define s2     (*((char *)(pStart+3)))</span>
  <span class="preproc">#define pM1    ((void **)(pStart+4))</span>
  <span class="preproc">#define pM2    ((void **)(pStart+12))</span>
  <span class="preproc">#define M1min  (*((double *)(pStart+20)))</span>
  <span class="preproc">#define M2max  (*((double *)(pStart+28)))</span>
  <span class="preproc">#define y      (*((double *)(pStart+36)))</span>

    <span class="kw">switch</span>(CallMode)
      { <span class="rem">// Проверка типа переменных</span>
        <span class="kw">case</span> <a class="hidden" href="RDS_BFM_VARCHECK.htm" title="А.2.4.18. RDS_BFM_VARCHECK &ndash; проверка допустимости структуры статических переменных блока">RDS_BFM_VARCHECK</a>:
          <span class="kw">if</span>(strcmp((<span class="kw">char</span>*)ExtParam,<span class="str">"{SSSSMDMDDDD}"</span>)==<span class="const">0</span>)
            <span class="kw">return</span> <a class="hidden" href="app_a_2_1.htm#ref2" title="Возврат RDS_BFR_DONE">RDS_BFR_DONE</a>;
          <span class="kw">return</span> <a class="hidden" href="RDS_BFM_VARCHECK.htm#light_ref3" title="Возврат RDS_BFR_BADVARSMSG">RDS_BFR_BADVARSMSG</a>;

        <span class="rem">// Выполнение такта моделирования</span>
        <span class="kw">case</span> <a class="hidden" href="RDS_BFM_MODEL.htm" title="А.2.4.9. RDS_BFM_MODEL &ndash; выполнение такта расчета">RDS_BFM_MODEL</a>:
          <span class="kw">if</span>(s1) <span class="rem">// Изменилось значение входа M1</span>
            { <span class="rem">// Необходимо найти новый минимальный элемент</span>
              s1=<span class="const">0</span>; <span class="rem">// Сброс сигнала</span>
              <span class="kw">if</span>(<a class="hidden" href="RDS_ARRAYEXISTS.htm" title="А.5.15.3. Макрос RDS_ARRAYEXISTS &ndash; проверка наличия элементов в матрице/массиве">RDS_ARRAYEXISTS</a>(pM1)) <span class="rem">// Матрица M1 не пуста</span>
                { <span class="rem">// Вспомогательные переменные</span>
                  <span class="kw">int</span> m1count;
                  <span class="kw">double</span> *m1data;
                  <span class="rem">// Число элементов в матрице</span>
                  m1count=<a class="hidden" href="RDS_ARRAYROWS.htm" title="А.5.15.6. Макрос RDS_ARRAYROWS &ndash; число строк матрицы/массива">RDS_ARRAYROWS</a>(pM1)*<a class="hidden" href="RDS_ARRAYCOLS.htm" title="А.5.15.1. Макрос RDS_ARRAYCOLS &ndash; число столбцов матрицы/массива">RDS_ARRAYCOLS</a>(pM1);
                  <span class="rem">// Получить указатель на первый элемент</span>
                  m1data=(<span class="kw">double</span>*)<a class="hidden" href="RDS_ARRAYDATA.htm" title="А.5.15.2. Макрос RDS_ARRAYDATA &ndash; указатель на первый элемент матрицы/массива">RDS_ARRAYDATA</a>(pM1);
                  <span class="rem">// Поиск минимального элемента</span>
                  M1min=<a class="hidden" href="pm_2_5_1.htm#ref12" title="Проверка вещественного числа на признак ошибки">DoubleErrorValue</a>;
                  <span class="kw">for</span>(<span class="kw">int</span> i=<span class="const">0</span>;i&lt;m1count;i++)
                    <span class="kw">if</span>(m1data[i]!=<a class="hidden" href="pm_2_5_1.htm#ref12" title="Проверка вещественного числа на признак ошибки">DoubleErrorValue</a> &amp;&amp;
                       (M1min==<a class="hidden" href="pm_2_5_1.htm#ref12" title="Проверка вещественного числа на признак ошибки">DoubleErrorValue</a> || M1min&gt;m1data[i]))
                      M1min=m1data[i];
                }
              <span class="kw">else</span> <span class="rem">// Матрица M1 пуста</span>
                M1min=<a class="hidden" href="pm_2_5_1.htm#ref12" title="Проверка вещественного числа на признак ошибки">DoubleErrorValue</a>;
            } <span class="rem">// if(s1)</span>
          <span class="kw">if</span>(s2) <span class="rem">// Изменилось значение входа M2</span>
            { <span class="rem">// Необходимо найти новый максимальный элемент</span>
              s2=<span class="const">0</span>; <span class="rem">// Сброс сигнала</span>
              <span class="kw">if</span>(<a class="hidden" href="RDS_ARRAYEXISTS.htm" title="А.5.15.3. Макрос RDS_ARRAYEXISTS &ndash; проверка наличия элементов в матрице/массиве">RDS_ARRAYEXISTS</a>(pM2)) <span class="rem">// Матрица M2 не пуста</span>
                { <span class="rem">// Вспомогательные переменные</span>
                  <span class="kw">int</span> m2count;
                  <span class="kw">double</span> *m2data;
                  <span class="rem">// Число элементов в матрице</span>
                  m2count=<a class="hidden" href="RDS_ARRAYROWS.htm" title="А.5.15.6. Макрос RDS_ARRAYROWS &ndash; число строк матрицы/массива">RDS_ARRAYROWS</a>(pM2)*<a class="hidden" href="RDS_ARRAYCOLS.htm" title="А.5.15.1. Макрос RDS_ARRAYCOLS &ndash; число столбцов матрицы/массива">RDS_ARRAYCOLS</a>(pM2);
                  <span class="rem">// Получить указатель на первый элемент</span>
                  m2data=(<span class="kw">double</span>*)<a class="hidden" href="RDS_ARRAYDATA.htm" title="А.5.15.2. Макрос RDS_ARRAYDATA &ndash; указатель на первый элемент матрицы/массива">RDS_ARRAYDATA</a>(pM2);
                  <span class="rem">// Поиск максимального элемента</span>
                  M2max=<a class="hidden" href="pm_2_5_1.htm#ref12" title="Проверка вещественного числа на признак ошибки">DoubleErrorValue</a>;
                  <span class="kw">for</span>(<span class="kw">int</span> i=<span class="const">0</span>;i&lt;m2count;i++)
                    <span class="kw">if</span>(m2data[i]!=<a class="hidden" href="pm_2_5_1.htm#ref12" title="Проверка вещественного числа на признак ошибки">DoubleErrorValue</a> &amp;&amp;
                       (M2max==<a class="hidden" href="pm_2_5_1.htm#ref12" title="Проверка вещественного числа на признак ошибки">DoubleErrorValue</a> || M2max&lt;m2data[i]))
                      M2max=m2data[i];
                }
              <span class="kw">else</span> <span class="rem">// Матрица M2 пуста</span>
                M2max=<a class="hidden" href="pm_2_5_1.htm#ref12" title="Проверка вещественного числа на признак ошибки">DoubleErrorValue</a>;
            } <span class="rem">// if(s2)</span>
          <span class="rem">// Значения M1min и M2max определены – вычисление произведения</span>
          <span class="kw">if</span>(M1min!=<a class="hidden" href="pm_2_5_1.htm#ref12" title="Проверка вещественного числа на признак ошибки">DoubleErrorValue</a> &amp;&amp; M2max!=<a class="hidden" href="pm_2_5_1.htm#ref12" title="Проверка вещественного числа на признак ошибки">DoubleErrorValue</a>)
            y=M1min*M2max;
          <span class="kw">else</span>
            y=<a class="hidden" href="pm_2_5_1.htm#ref12" title="Проверка вещественного числа на признак ошибки">DoubleErrorValue</a>;
          <span class="kw">break</span>;
      }
    <span class="kw">return</span> <a class="hidden" href="app_a_2_1.htm#ref2" title="Возврат RDS_BFR_DONE">RDS_BFR_DONE</a>;
  <span class="rem">// Отмена макроопределений</span>
  <span class="preproc">#undef y</span>
  <span class="preproc">#undef M2max</span>
  <span class="preproc">#undef M1min</span>
  <span class="preproc">#undef pM2</span>
  <span class="preproc">#undef pM1</span>
  <span class="preproc">#undef s2</span>
  <span class="preproc">#undef s1</span>
  <span class="preproc">#undef Ready</span>
  <span class="preproc">#undef Start</span>
  <span class="preproc">#undef pStart</span>
  }
  <span class="rem">//=========================================</span></pre>

<p>При вызове модели с параметром <span class="cpp"><a href="RDS_BFM_MODEL.htm" title="А.2.4.9. RDS_BFM_MODEL &ndash; выполнение такта расчета">RDS_BFM_MODEL</a></span> прежде всего проверяется сигнал <span class="cpp">s1</span>.
Если значение <span class="cpp">s1</span> ненулевое, значит, в конце предыдущего такта расчета сработала связь,
соединенная со входом <span class="cpp">M1</span>, в результате чего вход получил новое значение. В этом случае
переменной <span class="cpp">s1</span> присваивается 0 (сигнал подготавливается к следующему срабатыванию) и,
если матрица <span class="cpp">M1</span> не пуста, производится поиск минимального элемента, который записывается во
внутреннюю переменную блока <span class="cpp">M1min</span>. Если матрица пуста, переменной <span class="cpp">M1min</span>
присваивается значение-индикатор ошибки из глобальной переменной <span class="cpp">DoubleErrorValue</span>
(подразумевается, что эта переменная инициализирована в
<a href="pm_2_2.htm" title="&sect;2.2. Главная функция DLL и файлы заголовков">главной функции DLL</a>, как указано
в <a href="pm_2_5_1.htm#ref12" title="Проверка вещественного числа на признак ошибки">&sect;2.5.1</a>).</p>

<p>Далее проверяется сигнал <span class="cpp">s2</span>. Его ненулевое значение сигнализирует об изменении
значения матрицы <span class="cpp">M2</span> и необходимости вычисления нового значения ее максимального элемента.
В этом случае сигнал <span class="cpp">s2</span> сбрасывается, и найденный максимальный элемент матрицы записывается
во внутреннюю переменную <span class="cpp">M2max</span>. Затем произведение <span class="cpp">M1min</span> и
<span class="cpp">M2max</span> присваивается выходу блока <span class="cpp">y</span>, если ни одна из этих
двух внутренних переменных не равна значению <span class="cpp">DoubleErrorValue</span>, указывающему на ошибку
вычисления (максимальный или минимальный элемент матрицы найти не удалось &ndash; одна из матриц пуста или
во всех элементах одной из матриц находится значение-индикатор ошибки).</p>

<p>В результате единственная операция, выполняющаяся в модели при любом запуске &ndash; это вычисление произведения
<span class="cpp">M1min</span> и <span class="cpp">M2max</span>. Перебор элементов матрицы
<span class="cpp">M1</span> выполняется только при срабатывании подключенной к ней связи, так же как
и перебор элементов <span class="cpp">M2</span>. Если значения на одном из входов блока меняются редко,
такая модель позволит получить выигрыш в быстродействии, поскольку вычисления для этого входа будут выполняться
только при его изменениях. Если бы у блока не было связанных сигнальных переменных и модель запускалась бы
при срабатывании любой связи, ей пришлось бы каждый раз перебирать элементы обеих матриц, независимо от того,
какая из них изменилась.</p>

<p>Проверить работу созданного блока можно при помощи схемы, изображенной
на <a href="#pic1" title="Блок, вычисляющий произведение минимального элемента одной матрицы и максимального элемента другой">рис.&nbsp;34</a>.
В процессе расчета при любом изменении значений в обеих входных матрицах на числовом индикаторе должно
отображаться произведение минимального элемента первой матрицы и максимального элемента второй. Если
это произведение не может быть вычислено (например, если одна из матриц пуста), на индикаторе отобразится вопросительный
знак.</p>

<div class="pic"><div class="container" id="pic1">
<img src="../img/TestMatMinMax.png" width="503" height="333" alt="Блок, вычисляющий произведение минимального элемента одной матрицы и максимального элемента другой" />
<p id="light_pic1">Рис.&nbsp;34. Блок, вычисляющий произведение минимального элемента одной матрицы и максимального элемента другой</p>
</div></div>


</div>
<p style="clear:both; min-height:1em; padding:0px; margin: 0px;"></p><hr class="off" /><div class="bottomnav">
<div class="left">
<span class="button"><a href="pm_2_5_6.htm" title="Предыдущий параграф" id="pgup_f">&lt;&lt;</a></span>
<span class="button"><a href="pm_2_5_8.htm" title="Следующий параграф" id="pgdn_f">&gt;&gt;</a></span>
<span class="divider"></span>
<span class="button"><a href="pm_index.htm#light_htm:pm_2_5_7">Оглавление</a></span>
<span class="button"><a href="alpha.htm">Указатель</a></span>
</div>
</div>
</body>
</html>
