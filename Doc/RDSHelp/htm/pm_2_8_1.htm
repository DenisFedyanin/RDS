<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="ru" xml:lang="ru">
<head>
  <link rel="stylesheet" type="text/css" href="../css/main.css" />
  <link rel="stylesheet" type="text/css" href="../css/cpp.css" />
  <meta http-equiv="Content-Type" content="text/html;charset=windows-1251" />
  <script type="text/javascript" src="script.js"></script>
  <title>&sect;2.8.1. Способы хранения параметров блока</title>
</head><body onload="DocLoad()">
<div class="pageheader"><span class="off"><b>Текущий раздел:</b></span>
<div class="int"><p id="top"><a href="../index.htm">Описания RDS</a></p>
<div class="level"><p><a href="pm_index.htm">Руководство программиста</a></p>
<div class="level"><p><a href="pm_index.htm#light_htm:pm_2">Глава 2. Создание моделей блоков</a></p>
<div class="level"><p><a href="pm_index.htm#light_htm:pm_2_8">&sect;2.8. Сохранение и загрузка параметров блока</a></p>
<div class="level"><p>&sect;2.8.1. Способы хранения параметров блока</p>
</div>
</div>
</div>
</div>
</div></div>
<div class="topnav"><span class="off"><b>Навигация:</b></span>
<div class="left">
<span class="button"><a href="pm_2_7_6.htm" title="Предыдущий параграф" id="pgup">&lt;&lt;</a></span>
<span class="button"><a href="pm_2_8_2.htm" title="Следующий параграф" id="pgdn">&gt;&gt;</a></span>
<span class="divider"></span>
<span class="button"><a href="pm_index.htm#light_htm:pm_2_8_1">Оглавление</a></span>
<span class="button"><a href="alpha.htm">Указатель</a></span>
</div>
</div>

<div class="text">
<h1 class="off">Руководство программиста</h1>
<h2 class="off">Глава 2. Создание моделей блоков</h2>
<h3>&sect;2.8. Сохранение и загрузка параметров блока</h3>
<p class="abstract">Рассматриваются процедуры сохранения и загрузки личных параметров блока в файле схемы. Описывается более
            простой двоичный способ сохранения и более сложный &ndash; текстовый. Для текстового режима приводятся разные
            способы хранения данных: формат с ключевыми словами и формат, аналогичный стандартным INI-файлам
            (&laquo;имя=значение&raquo;). Рассматриваются вспомогательные объекты RDS, упрощающие разбор текста.</p>
<h4>&sect;2.8.1. Способы хранения параметров блока</h4>
<p class="abstract">Рассматриваются двоичный и текстовый форматы хранения личных данных блока в файле или буфере обмена,
                указываются преимущества и недостатки обоих форматов.</p>


<p><span id="ref1">Если</span>
какие-либо настроечные параметры блока хранятся в его
<span id="light_ref1"><a href="pm_1_4.htm#ref8" title="Личная область данных блока">личной области данных</a></span>,
модель должна сама позаботиться об их записи при сохранении схемы, добавлении блока в
<a href="um_2_16_1.htm" title="&sect;2.16.1. Элементы и меню окна библиотеки">библиотеку</a>
или копировании его в буфер обмена. Можно, конечно, хранить параметры в тексте
<a href="um_1_2.htm#ref20" title="Комментарий блока">комментария</a>
блока или в значениях по умолчанию
<a href="pm_1_5.htm" title="&sect;1.5. Статические переменные блоков, входы и выходы">статических переменных</a>, как было сделано в примерах
в <a href="pm_2_6_3.htm#light_ref8" title="Пример передачи данных через динамическую переменную">&sect;2.6.3</a> и
<a href="pm_2_7_4.htm#ref1" title="Хранение параметров в значениях переменных по умолчанию">&sect;2.7.4</a>
&ndash; эти значения RDS сохраняет самостоятельно. Однако, это не всегда удобно. Комментарий
блока может быть изменен пользователем, не знающим, что модель блока использует его для своих целей,
а при хранении параметров в значениях переменных по умолчанию придется ограничиваться набором типов,
используемых в RDS. Значения по умолчанию хорошо подходят для хранения простых параметров, например,
чисел <span class="cpp">double</span> и <span class="cpp">int</span>. Если же параметры имеют сложную структуру,
и, к тому же, не предполагается, что пользователь захочет устанавливать значения этих параметров по связям
от других блоков, лучше всего хранить их в личной области данных. При этом можно использовать любые
типы переменных: структуры, массивы структур, битовые флаги и т.п, и обращаться к ним как к обычным
переменным языка C. Конечно, в переменных блока тоже можно было бы организовать, например, массив структур,
но хранить в его значениях по умолчанию настроечные параметры не получится &ndash; в RDS у всех
элементов массива будет одно общее значение по умолчанию.</p>

<p><span id="ref2">RDS</span>
<span id="ref3">сохраняет</span>
схемы и блоки в одном из двух форматов: в двоичном
или в текстовом. <span id="light_ref2">Данные в двоичном формате</span>, как
правило, занимают меньше места и быстрее загружаются, при этом часть модели блока, отвечающую за загрузку
и сохранение данных, можно сделать очень простой &ndash; достаточно записать подряд все параметры блока при
сохранении схемы или блока, а при загрузке считать их в той же последовательности. Данные в текстовом
формате занимают больше места, обрабатываются несколько дольше, и модель блока получается более сложной
&ndash; необходимо анализировать текст, отыскивая в нем параметры блока (например, по ключевым словам).
Однако, в текстовом формате проще обеспечить совместимость новых версий моделей с данными, сохраненными старыми
версиями. При изменении структуры параметров блока загрузка старой схемы в двоичном формате, вероятнее всего,
вызовет ошибки из-за несоответствия списка параметров, сохраненных предыдущей версией модели, списку,
которую попытается загрузить новая версия. Например, если старая версия модели сохраняла два числа
<span class="cpp">double</span> и одно число <span class="cpp">int</span>
(итого 2&times;8+4=20 байтов), а новая &ndash; три числа <span class="cpp">double</span> и одно число
<span class="cpp">int</span> (3&times;8+4=28 байтов), то данные, записанные старой версией при сохранении схемы,
новой версией модели будут загружены неправильно.
<span id="light_ref3">В текстовом формате</span> такой проблемы обычно не возникает &ndash; параметры
блока чаще всего опознаются по ключевым словам, и те параметры, которые отсутствовали в старой версии модели,
просто не будут загружены и сохранят значения по умолчанию, поскольку соответствующие им ключевые слова
при загрузке старой схемы просто не встретятся. Конечно, двоичный формат тоже можно сделать достаточно гибким,
например, присвоив каждому параметру блока уникальный код и записывая пары &laquo;код-значение&raquo;.
Однако, при этом теряются основные достоинства двоичного формата &ndash; скорость загрузки и простота
реализации, поскольку теперь при загрузке придется анализировать код и тип каждого параметра. Кроме того,
схема, сохраненная в текстовом формате, может быть просмотрена и отредактирована в любом текстовом редакторе,
что значительно упрощает отладку моделей (всегда можно посмотреть, правильно ли записались параметры блока)
и позволяет, при желании, обрабатывать схемы какими-либо внешними программами, которые могут работать
с текстовыми файлами (например, искать в файле схемы какое-нибудь слово или сочетание слов при помощи программы
&laquo;grep&raquo;).</p>

<p>В данный момент двоичный формат используется в RDS только при копировании блоков через буфер обмена,
поскольку при этом не нужно обеспечивать совместимость с устаревшими версиями библиотек. Начиная с версии
1.0.123 схемы и блоки всегда сохраняются в текстовом формате.</p>

<p>В модель блока, настроечные параметры которого хранятся в личной области данных, достаточно добавить
функции сохранения и загрузки этих параметров только в одном из форматов. Формат, в котором сохраняет свои
данные модель, не обязательно должен соответствовать формату, в котором RDS сохраняет схему или блок.
При сохранении схемы или записи блока в библиотеку модель блока сначала вызывается для сохранения данных в
том формате, в котором сохраняется весь файл, то есть в текстовом. Если в результате вызова модели были
сохранены какие-либо данные, RDS считает, что модель поддерживает этот формат, и не предпринимает
никаких дополнительных действий. Если же данные не были сохранены, RDS снова вызывает модель, но
уже для сохранения данных в двоичном формате, после чего записанные моделью данные приводятся в соответствие
с требованиями текстового формата. Сохраненный моделью массив двоичных данных переводится в набор
шестнадцатеричных чисел и записывается в файл в виде текста
&laquo;dlldata data <i>размер_массива</i> <i>набор_чисел</i>&raquo;. При копировании одного
или нескольких блоков в буфер обмена RDS сначала вызывает модель для сохранения данных в двоичном формате.
Если модель ничего не сохранила, RDS будет считать, что двоичный формат не поддерживается моделью, и
она будет вызвана еще раз для записи в текстовом формате. Текст, который она записала, будет добавлен в
буфер обмена как массив байтов.</p>

<p>При загрузке схемы или блока или при вставке блоков из буфера обмена модель всегда вызываются для
загрузки данных в том формате, в котором они их сохранила при записи этой схемы или при копировании блока в
буфер обмена. Например, если при сохранении схемы модель записала двоичные данные, при загрузке этой схемы
модель будет вызвана только для загрузки в двоичном формате, поскольку в схеме присутствуют именно сохраненные
двоичные данные.</p>

<p>Чаще всего в моделях реализуют только текстовый формат загрузки и записи параметров как наиболее гибкий.
Двоичный формат обычно используют для несложных блоков, которые разрабатываются для какой-либо конкретной схемы
и которые не предполагается включать в библиотеки. В принципе, можно сделать в модели сохранение данных в
обоих форматах, но на практике так поступают редко &ndash; раз более сложный текстовый формат уже поддерживается,
нет необходимости добавлять в модель поддержку двоичного.</p>

</div>
<p style="clear:both; min-height:1em; padding:0px; margin: 0px;"></p><hr class="off" /><div class="bottomnav">
<div class="left">
<span class="button"><a href="pm_2_7_6.htm" title="Предыдущий параграф" id="pgup_f">&lt;&lt;</a></span>
<span class="button"><a href="pm_2_8_2.htm" title="Следующий параграф" id="pgdn_f">&gt;&gt;</a></span>
<span class="divider"></span>
<span class="button"><a href="pm_index.htm#light_htm:pm_2_8_1">Оглавление</a></span>
<span class="button"><a href="alpha.htm">Указатель</a></span>
</div>
</div>
</body>
</html>
