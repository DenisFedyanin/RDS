<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="ru" xml:lang="ru">
<head>
  <link rel="stylesheet" type="text/css" href="../css/main.css" />
  <link rel="stylesheet" type="text/css" href="../css/cpp.css" />
  <meta http-equiv="Content-Type" content="text/html;charset=windows-1251" />
  <script type="text/javascript" src="script.js"></script>
  <title>&sect;3.8.1. Дополнительные описания, вводимые в модель</title>
</head><body onload="DocLoad()">
<div class="pageheader"><span class="off"><b>Текущий раздел:</b></span>
<div class="int"><p id="top"><a href="../index.htm">Описания RDS</a></p>
<div class="level"><p><a href="um_index.htm">Описание пользователя</a></p>
<div class="level"><p><a href="um_index.htm#light_htm:um_3">Глава 3. Использование стандартных модулей автокомпиляции</a></p>
<div class="level"><p><a href="um_index.htm#light_htm:um_3_8">&sect;3.8. Краткий перечень вводимых в модель описаний и реакций на события</a></p>
<div class="level"><p>&sect;3.8.1. Дополнительные описания, вводимые в модель</p>
</div>
</div>
</div>
</div>
</div></div>
<div class="topnav"><span class="off"><b>Навигация:</b></span>
<div class="left">
<span class="button"><a href="um_3_7_12_5.htm" title="Предыдущий параграф" id="pgup">&lt;&lt;</a></span>
<span class="button"><a href="ac_RDS_BFM_INIT.htm" title="Следующий параграф" id="pgdn">&gt;&gt;</a></span>
<span class="divider"></span>
<span class="button"><a href="um_index.htm#light_htm:um_3_8_1">Оглавление</a></span>
<span class="button"><a href="alpha.htm">Указатель</a></span>
</div>
</div>

<div class="text">
<h1 class="off">Описание пользователя</h1>
<h2 class="off">Глава 3. Использование стандартных модулей автокомпиляции</h2>
<h3>&sect;3.8. Краткий перечень вводимых в модель описаний и реакций на события</h3>
<p class="abstract">Перечисляются все возможные реакции на события, которые пользователь может ввести в автокомпилируемую модель блока, и кратко описываются их параметры. Рассматривается общая структура формируемой модулем автокомпиляции программы и место пользовательских описаний в ней.</p>
<h4>&sect;3.8.1. Дополнительные описания, вводимые в модель</h4>
<p class="abstract">Рассматриваются три группы описаний, которые пользователь может вставить внутрь формируемой модулем автокомпиляции программы. Они могут содержать описания типов, функций, глобальных переменных и констант, дополнительных полей класса блока, команды включения файлов заголовков и т.п.</p>


<p><span id="ref1">Помимо</span>
реакций на события, происходящие с блоком в схеме, в модель могут быть вставлены различные
описания пользователя: описания типов и классов, служебные функции, команды включения различных файлов
заголовков и т.п. Модуль автокомпиляции предоставляет три точки для вставки таких описаний внутрь
<span id="light_ref1">автоматически формируемой программы модели</span>:
глобальные описания, описания внутри класса блока и
описания после класса блока. Тексты всех этих описаний вводятся на вкладке
&laquo;<span class="menu"><a href="um_3_6_4.htm" title="&sect;3.6.4. Описания программы и реакции блока на события">события</a></span>&raquo; в соответствующих подразделах раздела
&laquo;<span class="menu">описания</span>&raquo;.</p>

<p>Внутри формируемого текста эти три точки вставки описаний размещены следующим образом (ниже они выделены
<span class="changes">цветом</span>):</p>

<div class="cpphdr">Глобальные описания из параметров модуля автокомпиляции</div>
<pre class="cpphdr">  #include &lt;windows.h&gt;
  #include &lt;stdlib.h&gt;
  #include &lt;math.h&gt;
  #include &lt;float.h&gt;</pre>

<div class="cpphdr">Автоматически сформированные служебные описания и команды включения стандартных заголовков RDS</div>
<pre class="cpphdr">  #include &lt;RdsDef.h&gt;
  #define RDS_SERV_FUNC_BODY rdsbcppGetService
  #include &lt;RdsFunc.h&gt;
  #include &lt;CommonBl.h&gt;
  #include &lt;CommonAC.hpp&gt;
  &hellip;</pre>

<div class="cppplace">Глобальные описания пользователя</div>

<div class="cpphdr">Автоматически сформированные описания классов для функций блока</div>
<pre class="cpphdr">  class rdsbcppFunction0G : public rdsbcppFunction // Глобальный
  { &hellip; }
  class rdsbcppFunction0L : public rdsbcppFunction // Локальный
  { &hellip; }
  &hellip;</pre>

<div class="cpphdr"><span id="ref2">Автоматически</span>
сформированная <span id="light_ref3">главная функция DLL</span></div>
<pre class="cpphdr">  int WINAPI <span id="light_ref2">DllEntryPoint</span>(<a class="hidden" href="app_ids.htm#light_ref17" title="Дескриптор модуля">HINSTANCE</a> hinst,
      unsigned long reason,void *lpReserved)
  { &hellip; }</pre>

<div class="cpphdr">Макросы для автоматического формирования описаний классов переменных блока</div>
<pre class="cpphdr">  // Переменная char ("S")
  RDSBCPP_STATICPLAINCLASS(rdsbcstSignal,char);
  // Динамическая переменная double ("D")
  RDSBCPP_DYNAMICPLAINCLASS(rdsbcdtDouble,double,"D");
  &hellip;</pre>

<pre class="cpp">  //----------------------------------------
  // Класс блока
  //----------------------------------------
  class rdsbcppBlockClass
  { public:
      // Структура данных блока
      <a class="hidden" href="RDS_BLOCKDATA.htm#ref2" title="Указатель на RDS_BLOCKDATA">RDS_PBLOCKDATA</a> <a class="hidden" href="um_3_7_1.htm#ref26" title="Указатель на структуру данных блока">rdsbcppBlockData</a>;</pre>

<div class="cpphdr">Автоматически сформированные описания
динамических и статических переменных блока, настроечных параметров и объектов для доступа к функциям</div>
<pre class="cpphdr">      // Динамические переменные
      rdsbcdtDouble DynTime;
      // Статические переменные
      rdsbcstSignal Start;
      rdsbcstSignal Ready;
      // Объекты функций блоков (те же имена, что и у глобальных)
      rdsbcppFunction0L rdsfuncControlValueChanged;
      &hellip;</pre>

<div class="cpphdr">Автоматически сформированные служебные функции класса блока и заголовки функций
реакции на события</div>
<pre class="cpphdr">      // Инициализация переменных блока
      void rdsbcppInitVars(void *base)
      { &hellip; };
      // Проверка существования динамических переменных
      <a class="hidden" href="app_ids.htm#light_ref11" title="Логический тип Windows API">BOOL</a> rdsbcppDynVarsOk(void){return DynTime.<a class="hidden" href="um_3_7_3_1.htm#ref5" title="Проверка существования динамической переменной">Exists</a>();};
      // Загрузка настроечных параметров
      char *rdsbcppLoadParameters(char *rdsbcpp_Text);
      // Запись настроечных параметров
      void rdsbcppSaveParameters(void);
      // Вызов окна настройки
      <a class="hidden" href="app_ids.htm#light_ref11" title="Логический тип Windows API">BOOL</a> rdsbcppShowSetupWindow(void);
      // Функции реакции на события
      void rdsbcppModel(void);
      &hellip;</pre>

<div class="cppplace">Описания пользователя внутри класса блока</div>

<pre class="cpp">  }; // class rdsbcppBlockClass
  //----------------------------------------</pre>

<div class="cpphdr">Автоматически сформированные служебные функции класса блока, тела
которых вынесены за пределы самого класса</div>
<pre class="cpphdr">  // Загрузка настроечных параметров
  char *rdsbcppLoadParameters(char *rdsbcpp_Text)
  { &hellip; }
  // Запись настроечных параметров
  void rdsbcppSaveParameters(void)
  { &hellip; }
  &hellip;</pre>

<div class="cppplace">Описания пользователя после класса блока</div>

<div class="cpphdr">Автоматически сформированная функция модели блока</div>
<pre class="cpphdr">  extern "C" __declspec(dllexport)
    int <a class="hidden" href="app_ids.htm#light_ref24" title="Тип вызова сервисных функций">RDSCALL</a> rdsbcppBlockEntryPoint(
      int CallMode,<a class="hidden" href="RDS_BLOCKDATA.htm#ref2" title="Указатель на RDS_BLOCKDATA">RDS_PBLOCKDATA</a> BlockData,
      <a class="hidden" href="app_ids.htm#light_ref21" title="Указатель на любые данные (void*)">LPVOID</a> ExtParam)
  { &hellip; }</pre>

<div class="cpphdr">Автоматически сформированные функции реакций на события, внутрь каждой из
которых вставлен введенный пользователем текст</div>
<pre class="cpphdr">  // Один такт моделирования
  void rdsbcppBlockClass::rdsbcppModel(void)
  { &hellip; }
  &hellip;</pre>

<p>Глобальные описания пользователя размещаются после команд включения стандартных файлов заголовков и
специализированных заголовков RDS, поэтому в них можно использовать все стандартные типы, константы
и структуры Windows API (<span class="cpp"><a href="app_ids.htm#light_ref21" title="Указатель на любые данные (void*)">LPVOID</a></span>, <span class="cpp">HANDLE</span>,
<span class="cpp"><a href="app_ids.htm#light_ref18" title="Дескриптор окна">HWND</a></span> и т.п.) Можно также использовать любые стандартные типы, константы и структуры
RDS (<span class="cpp"><a href="app_ids.htm#light_ref1" title="Идентификатор блока">RDS_BHANDLE</a></span>, <span class="cpp"><a href="RDS_BLOCKDATA.htm#ref3" title="Структура RDS_BLOCKDATA">RDS_BLOCKDATA</a></span> и т.п.) В глобальных
описаниях нельзя ссылаться на объекты, создаваемые для работы с функциями блока
(см. <a href="um_index.htm#light_htm:um_3_7_12" title="&sect;3.7.13. Вызов функций блоков">&sect;3.7.13</a>) и на класс блока
<span class="cpp">rdsbcppBlockClass</span> &ndash; все эти описания располагаются после глобальных описаний
пользователя. Чаще всего в глобальные описания включают:</p>

<ul>
  <li>команды включения файлов заголовков &ndash; как стандартных, так и пользовательских;</li>
  <li>глобальные переменные пользователя;</li>
  <li>описания типов и структур, используемых только в одной модели (если они используются в нескольких,
  имеет смысл записать их в отдельный файл и включать его в разных моделях, как в примере из
  <a href="um_3_7_12_2.htm" title="&sect;3.7.13.2. Вызов функции у всех блоков подсистемы">&sect;3.7.13.2</a>);</li>
  <li>пользовательские функции общего назначения, которым не нужен доступ к переменным блока, его
  настроечным параметрам и к объектам для вызова функций у других блоков.</li>
</ul>

<p class="noindent">Описания пользователя в классе блока размещаются в самом конце класса,
объект которого будет создаваться для каждого блока с данной моделью. Все описания типов и
объявления переменных и стандартных полей класса на этот момент уже сделаны, поэтому в описаниях внутри
класса можно ссылаться на любые объекты и типы. Любые функции, объявленные в этих описаниях, становятся
функциями-членами класса блока, поэтому по имени их можно будет вызывать только из других функций-членов и
из реакций на события (чтобы вызвать такую функцию из глобальной функции, необходимо как-то передать в
нее указатель на объект класса блока, доступный внутри функций-членов через ключевое слово
<span class="cpp">this</span>). Чаще всего в описания внутри класса включают:</p>

<ul>
  <li>пользовательские поля класса блока, если они нужны (нужно следить за тем, чтобы их имена не
  совпадали с именами переменных блока, настроечных параметров и прочих автоматически добавляемых в
  класс объектов);</li>
  <li>пользовательские функции, которым нужен доступ к переменным или настроечным параметрам блока, и которые
  будут вызываться из функций реакции на события;</li>
  <li>пользовательские функции, изнутри которых будут вызываться функции других блоков
  (см. <a href="um_3_7_12_5.htm" title="&sect;3.7.13.5. Объекты функций в автокомпилируемых моделях">&sect;3.7.13.5</a>).</li>
</ul>

<p class="noindent">Описания пользователя после класса блока, как следует из их названия, размещаются
после класса блока и нескольких его служебных функций. К этому моменту все служебные объекты модели уже
описаны, и в описаниях можно на них ссылаться. Чаще всего здесь размещают:</p>

<ul>
  <li>пользовательские функции общего назначения, которым нужен доступ к объектам для вызова функций других блоков
  (см. <a href="um_3_7_12_3.htm#ref5" title="Функция обратного вызова ControlValChanged_Callback">пример функции обратного вызова в &sect;3.7.13.3</a>);</li>
  <li>тела функций-членов класса, которые разработчик по какой-либо причине решил вынести за пределы
  самого класса (при этом в описаниях внутри класса все равно должны находиться их заголовки).</li>
</ul>

<p class="noindent">Все три точки вставки пользовательских описаний располагаются в тексте программы
до функций реакции на события, поэтому в функциях реакции можно пользоваться любыми объектами из этих описаний.</p>

</div>
<p style="clear:both; min-height:1em; padding:0px; margin: 0px;"></p><hr class="off" /><div class="bottomnav">
<div class="left">
<span class="button"><a href="um_3_7_12_5.htm" title="Предыдущий параграф" id="pgup_f">&lt;&lt;</a></span>
<span class="button"><a href="ac_RDS_BFM_INIT.htm" title="Следующий параграф" id="pgdn_f">&gt;&gt;</a></span>
<span class="divider"></span>
<span class="button"><a href="um_index.htm#light_htm:um_3_8_1">Оглавление</a></span>
<span class="button"><a href="alpha.htm">Указатель</a></span>
</div>
</div>
</body>
</html>
