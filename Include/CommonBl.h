//---------------------------------------------------------------------------
// Описания, необходимые для взаимодействия с блоками из библиотеки
// Common.dll
//---------------------------------------------------------------------------
#ifndef CommonBlH
#define CommonBlH

#ifndef RdsDefH
  // Для нормальной компиляции необходимы описания из RdsDef.h
  #include "RdsDef.h"
#endif

#include <pshpack1.h> // Установка плотной упаковки структур

//---------------------------------------------------------------------------
// Имена динамических переменных, управляемых блоком динамического расчета
//---------------------------------------------------------------------------
#define COMBL_V_DYNAMICTIME             "DynTime"       // Значение времени
                                                        // следующего шага (double)
#define COMBL_V_DYNAMICEVERYCYCLE       "DynEveryCl"    // Работать каждый такт
                                                        // (логическая, char)
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
// Функция, уведомляющая присоединенные блоки об изменении значения органа
// управления
//---------------------------------------------------------------------------
#define COMBL_F_CONTROLCHANGED_NAME "Common.ControlValueChanged"  // Имя функции
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
// Функция сообщающая обработчику ошибок о ошибке в математических блоках
//---------------------------------------------------------------------------
#define COMBL_F_MATHERROR_NAME "Common.MathError"  // Имя функции
// Параметры
typedef struct
{ DWORD servSize;       // Размер этой структуры в байтах (необходимо присвоить перед вызовом)
  LPSTR MessageText;    // Текст сообщения об ошибке (может быть NULL)
} COMBL_F_MATHERROR_DATA;
typedef COMBL_F_MATHERROR_DATA *COMBL_F_PMATHERROR_DATA;
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
// Функция, управляющая маркером в интегрированных графиках
//---------------------------------------------------------------------------
#define COMBL_F_SETTIMEMARKER_NAME      "Common.SetTimeGraphMarker"  // Имя функции
// Параметры
typedef struct
{ DWORD servSize;       // Размер этой структуры в байтах (необходимо присвоить перед вызовом)
  BOOL Marker;          // TRUE - установить, FALSE - сбросить
  LPSTR MarkerName;     // Название маркера
  DWORD Reserved;       // Зарезервировано для выравнивания **** REV2 ****
  double MarkerVal;     // Значение, на которое нужно установить маркер
} COMBL_F_SETTIMEMARKER_DATA;
typedef COMBL_F_SETTIMEMARKER_DATA *COMBL_F_PSETTIMEMARKER_DATA;
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
// Функция получения матрицы у блока редактирования/индикации матриц
//---------------------------------------------------------------------------
#define COMBL_F_GETMATRFROMBLOCK_NAME      "Common.GetMatrixFromBlock"  // Имя функции
// Параметры
typedef struct
{ DWORD servSize;       // Размер этой структуры в байтах (необходимо присвоить перед вызовом)
  int Type;             // Символ типа элемента массива (RDS_VARTYPE_*)
  BOOL Exists;          // TRUE - матрица существует (т.е. не 0 x 0)
  int Rows,Cols;        // Размерность матрицы
  int ItemSize;         // Размер элемента матрицы
  LPVOID Data;          // Начало области данных матрицы
} COMBL_F_GETMATRFROMBLOCK_DATA;
typedef COMBL_F_GETMATRFROMBLOCK_DATA *COMBL_F_PGETMATRFROMBLOCK_DATA;
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
// Функция уведомления сгруппированных кнопок о нажатии одной из них
//---------------------------------------------------------------------------
#define COMBL_F_RADIOBUTTONPRESS_NAME      "Common.RadioButtonPressed"  // Имя функции
// Параметры
typedef struct
{ DWORD servSize;       // Размер этой структуры в байтах (необходимо присвоить перед вызовом)
  RDS_BHANDLE BPressed; // Блок нажатой кнопки
  int Group;            // Номер группы нажатой кнопки
} COMBL_F_RADIOBUTTONPRESS_DATA;
typedef COMBL_F_RADIOBUTTONPRESS_DATA *COMBL_F_PRADIOBUTTONPRESS_DATA;
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
// Функция, возвращающая не ноль, если блок отмечает подсистему для автокопирования содержимого
//---------------------------------------------------------------------------
#define COMBL_F_CONTENTCOPYTARGET_NAME      "Common.ContentCopyTargetBlock"  // Имя функции
// Параметры:
//    NULL  - отмечает подсистему для любого копирования
//    char* - текстовый идентификатор копирования (возвращает не ноль только если отмечает подсистему
//            для копирования именно с таким идентификатором)
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
// Функция, возвращающая указатель на имя конфигурации, очишаемой в подсистеме при аквтокопировании содержимого
// Вызывается у блока, отмечающего точку копирования
#define COMBL_F_CONTENTCOPYTARGETCONF_NAME    "Common.ContentCopyTargetConfig"  // Имя функции
// Параметры
typedef struct
{ DWORD servSize;       // Размер этой структуры в байтах (необходимо присвоить перед вызовом)
  char *ConfigName;     // Имя конфигурации или NULL, если не используется
} COMBL_F_COPYTARGETCONFIG_DATA;
typedef COMBL_F_COPYTARGETCONFIG_DATA *COMBL_F_PCOPYTARGETCONFIG_DATA;
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
// Функция, возвращающая не ноль, если блок копирует куда-то содержимое подсистемы (сам в копировании участвовать не будет)
//---------------------------------------------------------------------------
#define COMBL_F_CONTENTCOPYSOURCE_NAME      "Common.ContentCopySourceBlock"  // Имя функции
// Параметров нет
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
// Функция синхронизации горизонтальных осей встроенных матричных графиков и ее константы
//---------------------------------------------------------------------------
// Начало имени глобального списка блоков
#define COMBL_F_HORZAXESSYNC_IDS        "Common.MatGraphDisplay.HorzAxisSync"
// Имя функции
#define COMBL_F_HORZAXESSYNC_NAME       "Common.MatGraphDisplay.HorzAxisSync"
// Параметры
typedef struct
{ DWORD servSize;       // Размер этой структуры в байтах (необходимо присвоить перед вызовом)
  int Command;          // Команда (константы ниже)
    #define COMBL_F_HORZAXESSYNC_CMDASK 0       // Запросить диапазоны всех графиков
    #define COMBL_F_HORZAXESSYNC_CMDRESET 1     // Сбросить масштабирование
    #define COMBL_F_HORZAXESSYNC_CMDSET 2       // Принудительно установить диапазон горизонтальной оси
  double HorzMin,       // Диапазоны
         HorzMax;

} COMBL_F_HORZAXESSYNC_DATA;
typedef COMBL_F_HORZAXESSYNC_DATA *COMBL_F_PHORZAXESSYNC_DATA;
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
// Функция внешнего управления масштабом встроенных матричных графиков
//---------------------------------------------------------------------------
// Имя функции
#define COMBL_F_MATGRAPHCONTROL_NAME    "Common.MatGraphDisplay.Control"
// Параметры
typedef struct
{ DWORD servSize;       // Размер этой структуры в байтах (необходимо присвоить перед вызовом)
  int Command;          // Команда (константы ниже)
    #define COMBL_F_MATGRAPHCONTROL_CNONE       0       // Нет команды (специальная константа)
    #define COMBL_F_MATGRAPHCONTROL_CRESET      1       // Вернуться к прежним осям (без параметра)
    #define COMBL_F_MATGRAPHCONTROL_CZOOMIN     2       // Увеличить масштаб (DParam1 - %)
    #define COMBL_F_MATGRAPHCONTROL_CZOOMOUT    3       // Уменьшить масштаб (DParam1 - %)
    #define COMBL_F_MATGRAPHCONTROL_CLEFT       4       // Сдвинуть видимую область влево (DParam1 - % диапазона)
    #define COMBL_F_MATGRAPHCONTROL_CRIGHT      5       // Сдвинуть видимую область вправо (DParam1 - % диапазона)
    #define COMBL_F_MATGRAPHCONTROL_CUP         6       // Сдвинуть видимую область вверх (DParam1 - % диапазона)
    #define COMBL_F_MATGRAPHCONTROL_CDOWN       7       // Сдвинуть видимую область вниз (DParam1 - % диапазона)
    #define COMBL_F_MATGRAPHCONTROL_CZOOMIN_H   8       // Увеличить масштаб по горизонтали (DParam1 - %)
    #define COMBL_F_MATGRAPHCONTROL_CZOOMOUT_H  9       // Уменьшить масштаб по горизонтали (DParam1 - %)
    #define COMBL_F_MATGRAPHCONTROL_CZOOMIN_V   10      // Увеличить масштаб по вертикали (DParam1 - %)
    #define COMBL_F_MATGRAPHCONTROL_CZOOMOUT_V  11      // Уменьшить масштаб по вертикали (DParam1 - %)
    #define COMBL_F_MATGRAPHCONTROL_CSET        12      // Установить границы диапазона (DParam1 - xmin,DParam2 - xmax,DParam3 - ymin,DParam4 - ymax)
    #define COMBL_F_MATGRAPHCONTROL_CSETX       13      // Установить границы горизонтального диапазона (DParam1 - xmin,DParam2 - xmax)
    #define COMBL_F_MATGRAPHCONTROL_CSETY       14      // Установить границы вертикального диапазона (DParam3 - ymin,DParam4 - ymax)
    // Служебные команды
    #define COMBL_F_MATGRAPHCONTROL_SGET        10000   // Вернуть текущие границы диапазона (DParam1 - xmin,DParam2 - xmax,DParam3 - ymin,DParam4 - ymax)
  double DParam1,DParam2,DParam3,DParam4; // Параметры (зависят от команды)
  int IParam1,IParam2,IParam3,IParam4;    // Параметры (зависят от команды)

} COMBL_F_MATGRAPHCONTROL_DATA;
typedef COMBL_F_MATGRAPHCONTROL_DATA *COMBL_F_PMATGRAPHCONTROL_DATA;
//---------------------------------------------------------------------------

// Возврат выравнивания по умолчанию
#include <poppack.h>

//---------------------------------------------------------------------------
#endif
